// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.3
// source: ss.proto

package ss

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//proto type
type SS_PROTO_TYPE int32

const (
	SS_PROTO_TYPE_HEART_BEAT_REQ         SS_PROTO_TYPE = 0
	SS_PROTO_TYPE_HEART_BEAT_RSP         SS_PROTO_TYPE = 1
	SS_PROTO_TYPE_PING_REQ               SS_PROTO_TYPE = 2
	SS_PROTO_TYPE_PING_RSP               SS_PROTO_TYPE = 3
	SS_PROTO_TYPE_LOGIN_REQ              SS_PROTO_TYPE = 4
	SS_PROTO_TYPE_LOGIN_RSP              SS_PROTO_TYPE = 5
	SS_PROTO_TYPE_LOGOUT_REQ             SS_PROTO_TYPE = 6
	SS_PROTO_TYPE_LOGOUT_RSP             SS_PROTO_TYPE = 7
	SS_PROTO_TYPE_REG_REQ                SS_PROTO_TYPE = 8
	SS_PROTO_TYPE_REG_RSP                SS_PROTO_TYPE = 9
	SS_PROTO_TYPE_CREATE_GROUP_REQ       SS_PROTO_TYPE = 12
	SS_PROTO_TYPE_CREATE_GROUP_RSP       SS_PROTO_TYPE = 13
	SS_PROTO_TYPE_USE_DISP_PROTO         SS_PROTO_TYPE = 14 // serv <--> disp <--> serv
	SS_PROTO_TYPE_APPLY_GROUP_REQ        SS_PROTO_TYPE = 16
	SS_PROTO_TYPE_APPLY_GROUP_RSP        SS_PROTO_TYPE = 17
	SS_PROTO_TYPE_APPLY_GROUP_NOTIFY     SS_PROTO_TYPE = 18
	SS_PROTO_TYPE_APPLY_GROUP_AUDIT      SS_PROTO_TYPE = 19
	SS_PROTO_TYPE_FETCH_APPLY_GROUP_REQ  SS_PROTO_TYPE = 20
	SS_PROTO_TYPE_FETCH_APPLY_GROUP_RSP  SS_PROTO_TYPE = 21
	SS_PROTO_TYPE_COMMON_NOTIFY          SS_PROTO_TYPE = 22
	SS_PROTO_TYPE_FETCH_AUDIT_GROUP_REQ  SS_PROTO_TYPE = 23
	SS_PROTO_TYPE_FETCH_AUDIT_GROUP_RSP  SS_PROTO_TYPE = 24
	SS_PROTO_TYPE_ENTER_GROUP_REQ        SS_PROTO_TYPE = 25
	SS_PROTO_TYPE_ENTER_GROUP_RSP        SS_PROTO_TYPE = 26
	SS_PROTO_TYPE_LOAD_GROUP_REQ         SS_PROTO_TYPE = 27
	SS_PROTO_TYPE_LOAD_GROUP_RSP         SS_PROTO_TYPE = 28
	SS_PROTO_TYPE_SEND_CHAT_REQ          SS_PROTO_TYPE = 29
	SS_PROTO_TYPE_SEND_CHAT_RSP          SS_PROTO_TYPE = 30
	SS_PROTO_TYPE_SAVE_GROUP_REQ         SS_PROTO_TYPE = 31
	SS_PROTO_TYPE_SAVE_GROUP_RSP         SS_PROTO_TYPE = 32
	SS_PROTO_TYPE_FETCH_CHAT_REQ         SS_PROTO_TYPE = 33
	SS_PROTO_TYPE_FETCH_CHAT_RSP         SS_PROTO_TYPE = 34
	SS_PROTO_TYPE_SYNC_CHAT_LIST         SS_PROTO_TYPE = 35
	SS_PROTO_TYPE_EXIT_GROUP_REQ         SS_PROTO_TYPE = 36
	SS_PROTO_TYPE_EXIT_GROUP_RSP         SS_PROTO_TYPE = 37
	SS_PROTO_TYPE_KICK_GROUP_REQ         SS_PROTO_TYPE = 38
	SS_PROTO_TYPE_KICK_GROUP_RSP         SS_PROTO_TYPE = 39
	SS_PROTO_TYPE_FETCH_OFFLINE_INFO_REQ SS_PROTO_TYPE = 40
	SS_PROTO_TYPE_FETCH_OFFLINE_INFO_RSP SS_PROTO_TYPE = 41
	SS_PROTO_TYPE_QUERY_GROUP_REQ        SS_PROTO_TYPE = 42
	SS_PROTO_TYPE_SYNC_GROUP_INFO        SS_PROTO_TYPE = 43
	SS_PROTO_TYPE_FETCH_USER_PROFILE_REQ SS_PROTO_TYPE = 44
	SS_PROTO_TYPE_FETCH_USER_PROFILE_RSP SS_PROTO_TYPE = 45
	SS_PROTO_TYPE_SAVE_USER_PROFILE_REQ  SS_PROTO_TYPE = 46
	SS_PROTO_TYPE_CHG_GROUP_ATTR_REQ     SS_PROTO_TYPE = 47
	SS_PROTO_TYPE_CHG_GROUP_ATTR_RSP     SS_PROTO_TYPE = 48
	SS_PROTO_TYPE_GROUP_GROUND_REQ       SS_PROTO_TYPE = 49
	SS_PROTO_TYPE_GROUP_GROUND_RSP       SS_PROTO_TYPE = 50 //new proto defined could add to servers/comm/ss_pack.go:GenSSPkg
)

// Enum value maps for SS_PROTO_TYPE.
var (
	SS_PROTO_TYPE_name = map[int32]string{
		0:  "HEART_BEAT_REQ",
		1:  "HEART_BEAT_RSP",
		2:  "PING_REQ",
		3:  "PING_RSP",
		4:  "LOGIN_REQ",
		5:  "LOGIN_RSP",
		6:  "LOGOUT_REQ",
		7:  "LOGOUT_RSP",
		8:  "REG_REQ",
		9:  "REG_RSP",
		12: "CREATE_GROUP_REQ",
		13: "CREATE_GROUP_RSP",
		14: "USE_DISP_PROTO",
		16: "APPLY_GROUP_REQ",
		17: "APPLY_GROUP_RSP",
		18: "APPLY_GROUP_NOTIFY",
		19: "APPLY_GROUP_AUDIT",
		20: "FETCH_APPLY_GROUP_REQ",
		21: "FETCH_APPLY_GROUP_RSP",
		22: "COMMON_NOTIFY",
		23: "FETCH_AUDIT_GROUP_REQ",
		24: "FETCH_AUDIT_GROUP_RSP",
		25: "ENTER_GROUP_REQ",
		26: "ENTER_GROUP_RSP",
		27: "LOAD_GROUP_REQ",
		28: "LOAD_GROUP_RSP",
		29: "SEND_CHAT_REQ",
		30: "SEND_CHAT_RSP",
		31: "SAVE_GROUP_REQ",
		32: "SAVE_GROUP_RSP",
		33: "FETCH_CHAT_REQ",
		34: "FETCH_CHAT_RSP",
		35: "SYNC_CHAT_LIST",
		36: "EXIT_GROUP_REQ",
		37: "EXIT_GROUP_RSP",
		38: "KICK_GROUP_REQ",
		39: "KICK_GROUP_RSP",
		40: "FETCH_OFFLINE_INFO_REQ",
		41: "FETCH_OFFLINE_INFO_RSP",
		42: "QUERY_GROUP_REQ",
		43: "SYNC_GROUP_INFO",
		44: "FETCH_USER_PROFILE_REQ",
		45: "FETCH_USER_PROFILE_RSP",
		46: "SAVE_USER_PROFILE_REQ",
		47: "CHG_GROUP_ATTR_REQ",
		48: "CHG_GROUP_ATTR_RSP",
		49: "GROUP_GROUND_REQ",
		50: "GROUP_GROUND_RSP",
	}
	SS_PROTO_TYPE_value = map[string]int32{
		"HEART_BEAT_REQ":         0,
		"HEART_BEAT_RSP":         1,
		"PING_REQ":               2,
		"PING_RSP":               3,
		"LOGIN_REQ":              4,
		"LOGIN_RSP":              5,
		"LOGOUT_REQ":             6,
		"LOGOUT_RSP":             7,
		"REG_REQ":                8,
		"REG_RSP":                9,
		"CREATE_GROUP_REQ":       12,
		"CREATE_GROUP_RSP":       13,
		"USE_DISP_PROTO":         14,
		"APPLY_GROUP_REQ":        16,
		"APPLY_GROUP_RSP":        17,
		"APPLY_GROUP_NOTIFY":     18,
		"APPLY_GROUP_AUDIT":      19,
		"FETCH_APPLY_GROUP_REQ":  20,
		"FETCH_APPLY_GROUP_RSP":  21,
		"COMMON_NOTIFY":          22,
		"FETCH_AUDIT_GROUP_REQ":  23,
		"FETCH_AUDIT_GROUP_RSP":  24,
		"ENTER_GROUP_REQ":        25,
		"ENTER_GROUP_RSP":        26,
		"LOAD_GROUP_REQ":         27,
		"LOAD_GROUP_RSP":         28,
		"SEND_CHAT_REQ":          29,
		"SEND_CHAT_RSP":          30,
		"SAVE_GROUP_REQ":         31,
		"SAVE_GROUP_RSP":         32,
		"FETCH_CHAT_REQ":         33,
		"FETCH_CHAT_RSP":         34,
		"SYNC_CHAT_LIST":         35,
		"EXIT_GROUP_REQ":         36,
		"EXIT_GROUP_RSP":         37,
		"KICK_GROUP_REQ":         38,
		"KICK_GROUP_RSP":         39,
		"FETCH_OFFLINE_INFO_REQ": 40,
		"FETCH_OFFLINE_INFO_RSP": 41,
		"QUERY_GROUP_REQ":        42,
		"SYNC_GROUP_INFO":        43,
		"FETCH_USER_PROFILE_REQ": 44,
		"FETCH_USER_PROFILE_RSP": 45,
		"SAVE_USER_PROFILE_REQ":  46,
		"CHG_GROUP_ATTR_REQ":     47,
		"CHG_GROUP_ATTR_RSP":     48,
		"GROUP_GROUND_REQ":       49,
		"GROUP_GROUND_RSP":       50,
	}
)

func (x SS_PROTO_TYPE) Enum() *SS_PROTO_TYPE {
	p := new(SS_PROTO_TYPE)
	*p = x
	return p
}

func (x SS_PROTO_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SS_PROTO_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ss_proto_enumTypes[0].Descriptor()
}

func (SS_PROTO_TYPE) Type() protoreflect.EnumType {
	return &file_ss_proto_enumTypes[0]
}

func (x SS_PROTO_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SS_PROTO_TYPE.Descriptor instead.
func (SS_PROTO_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{0}
}

type USER_LOGIN_RET int32

const (
	USER_LOGIN_RET_LOGIN_SUCCESS  USER_LOGIN_RET = 0
	USER_LOGIN_RET_LOGIN_EMPTY    USER_LOGIN_RET = 1
	USER_LOGIN_RET_LOGIN_PASS     USER_LOGIN_RET = 2
	USER_LOGIN_RET_LOGIN_ERR      USER_LOGIN_RET = 3
	USER_LOGIN_RET_LOGIN_MULTI_ON USER_LOGIN_RET = 4 //multi online
)

// Enum value maps for USER_LOGIN_RET.
var (
	USER_LOGIN_RET_name = map[int32]string{
		0: "LOGIN_SUCCESS",
		1: "LOGIN_EMPTY",
		2: "LOGIN_PASS",
		3: "LOGIN_ERR",
		4: "LOGIN_MULTI_ON",
	}
	USER_LOGIN_RET_value = map[string]int32{
		"LOGIN_SUCCESS":  0,
		"LOGIN_EMPTY":    1,
		"LOGIN_PASS":     2,
		"LOGIN_ERR":      3,
		"LOGIN_MULTI_ON": 4,
	}
)

func (x USER_LOGIN_RET) Enum() *USER_LOGIN_RET {
	p := new(USER_LOGIN_RET)
	*p = x
	return p
}

func (x USER_LOGIN_RET) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_LOGIN_RET) Descriptor() protoreflect.EnumDescriptor {
	return file_ss_proto_enumTypes[1].Descriptor()
}

func (USER_LOGIN_RET) Type() protoreflect.EnumType {
	return &file_ss_proto_enumTypes[1]
}

func (x USER_LOGIN_RET) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_LOGIN_RET.Descriptor instead.
func (USER_LOGIN_RET) EnumDescriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{1}
}

//logout
type USER_LOGOUT_REASON int32

const (
	USER_LOGOUT_REASON_LOGOUT_CLIENT_EXIT        USER_LOGOUT_REASON = 0 //client positive logout
	USER_LOGOUT_REASON_LOGOUT_CONN_CLOSED        USER_LOGOUT_REASON = 1 //client connection closed
	USER_LOGOUT_REASON_LOGOUT_SERVER_KICK_RECONN USER_LOGOUT_REASON = 2 //server kickout for reconn
	USER_LOGOUT_REASON_LOGOUT_SERVER_KICK_BAN    USER_LOGOUT_REASON = 3 //server kickout for ban
	USER_LOGOUT_REASON_LOGOUT_CLIENT_TIMEOUT     USER_LOGOUT_REASON = 4 //client timeout
	USER_LOGOUT_REASON_LOGOUT_OFFLINE_USER       USER_LOGOUT_REASON = 5 //user off-line still logout update online-logic
	USER_LOGOUT_REASON_LOGOUT_SERVER_SHUT        USER_LOGOUT_REASON = 6 //server shut down
)

// Enum value maps for USER_LOGOUT_REASON.
var (
	USER_LOGOUT_REASON_name = map[int32]string{
		0: "LOGOUT_CLIENT_EXIT",
		1: "LOGOUT_CONN_CLOSED",
		2: "LOGOUT_SERVER_KICK_RECONN",
		3: "LOGOUT_SERVER_KICK_BAN",
		4: "LOGOUT_CLIENT_TIMEOUT",
		5: "LOGOUT_OFFLINE_USER",
		6: "LOGOUT_SERVER_SHUT",
	}
	USER_LOGOUT_REASON_value = map[string]int32{
		"LOGOUT_CLIENT_EXIT":        0,
		"LOGOUT_CONN_CLOSED":        1,
		"LOGOUT_SERVER_KICK_RECONN": 2,
		"LOGOUT_SERVER_KICK_BAN":    3,
		"LOGOUT_CLIENT_TIMEOUT":     4,
		"LOGOUT_OFFLINE_USER":       5,
		"LOGOUT_SERVER_SHUT":        6,
	}
)

func (x USER_LOGOUT_REASON) Enum() *USER_LOGOUT_REASON {
	p := new(USER_LOGOUT_REASON)
	*p = x
	return p
}

func (x USER_LOGOUT_REASON) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_LOGOUT_REASON) Descriptor() protoreflect.EnumDescriptor {
	return file_ss_proto_enumTypes[2].Descriptor()
}

func (USER_LOGOUT_REASON) Type() protoreflect.EnumType {
	return &file_ss_proto_enumTypes[2]
}

func (x USER_LOGOUT_REASON) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_LOGOUT_REASON.Descriptor instead.
func (USER_LOGOUT_REASON) EnumDescriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{2}
}

type REG_RESULT int32

const (
	REG_RESULT_REG_SUCCESS  REG_RESULT = 0
	REG_RESULT_REG_DUP_NAME REG_RESULT = 1
	REG_RESULT_REG_DB_ERR   REG_RESULT = 2
)

// Enum value maps for REG_RESULT.
var (
	REG_RESULT_name = map[int32]string{
		0: "REG_SUCCESS",
		1: "REG_DUP_NAME",
		2: "REG_DB_ERR",
	}
	REG_RESULT_value = map[string]int32{
		"REG_SUCCESS":  0,
		"REG_DUP_NAME": 1,
		"REG_DB_ERR":   2,
	}
)

func (x REG_RESULT) Enum() *REG_RESULT {
	p := new(REG_RESULT)
	*p = x
	return p
}

func (x REG_RESULT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REG_RESULT) Descriptor() protoreflect.EnumDescriptor {
	return file_ss_proto_enumTypes[3].Descriptor()
}

func (REG_RESULT) Type() protoreflect.EnumType {
	return &file_ss_proto_enumTypes[3]
}

func (x REG_RESULT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REG_RESULT.Descriptor instead.
func (REG_RESULT) EnumDescriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{3}
}

//create group
type CREATE_GROUP_RESULT int32

const (
	CREATE_GROUP_RESULT_CREATE_RET_SUCCESS   CREATE_GROUP_RESULT = 0
	CREATE_GROUP_RESULT_CREATE_RET_DUPLICATE CREATE_GROUP_RESULT = 1 //same name
	CREATE_GROUP_RESULT_CREATE_RET_DB_ERR    CREATE_GROUP_RESULT = 2 //db-error
	CREATE_GROUP_RESULT_CREATE_RET_MAX_NUM   CREATE_GROUP_RESULT = 3 //max group
	CREATE_GROUP_RESULT_CREATE_RET_FAIL      CREATE_GROUP_RESULT = 4 //other fail
)

// Enum value maps for CREATE_GROUP_RESULT.
var (
	CREATE_GROUP_RESULT_name = map[int32]string{
		0: "CREATE_RET_SUCCESS",
		1: "CREATE_RET_DUPLICATE",
		2: "CREATE_RET_DB_ERR",
		3: "CREATE_RET_MAX_NUM",
		4: "CREATE_RET_FAIL",
	}
	CREATE_GROUP_RESULT_value = map[string]int32{
		"CREATE_RET_SUCCESS":   0,
		"CREATE_RET_DUPLICATE": 1,
		"CREATE_RET_DB_ERR":    2,
		"CREATE_RET_MAX_NUM":   3,
		"CREATE_RET_FAIL":      4,
	}
)

func (x CREATE_GROUP_RESULT) Enum() *CREATE_GROUP_RESULT {
	p := new(CREATE_GROUP_RESULT)
	*p = x
	return p
}

func (x CREATE_GROUP_RESULT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CREATE_GROUP_RESULT) Descriptor() protoreflect.EnumDescriptor {
	return file_ss_proto_enumTypes[4].Descriptor()
}

func (CREATE_GROUP_RESULT) Type() protoreflect.EnumType {
	return &file_ss_proto_enumTypes[4]
}

func (x CREATE_GROUP_RESULT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CREATE_GROUP_RESULT.Descriptor instead.
func (CREATE_GROUP_RESULT) EnumDescriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{4}
}

//Load Group
type LOAD_GROUP_REASON int32

const (
	LOAD_GROUP_REASON_LOAD_GRP_SEND_CHAT      LOAD_GROUP_REASON = 0 //send chat
	LOAD_GROUP_REASON_LOAD_GRP_QUERY_INFO     LOAD_GROUP_REASON = 1 //query group
	LOAD_GROUP_REASON_LOAD_GRP_CHG_GROUP_ATTR LOAD_GROUP_REASON = 2 //chg attr
)

// Enum value maps for LOAD_GROUP_REASON.
var (
	LOAD_GROUP_REASON_name = map[int32]string{
		0: "LOAD_GRP_SEND_CHAT",
		1: "LOAD_GRP_QUERY_INFO",
		2: "LOAD_GRP_CHG_GROUP_ATTR",
	}
	LOAD_GROUP_REASON_value = map[string]int32{
		"LOAD_GRP_SEND_CHAT":      0,
		"LOAD_GRP_QUERY_INFO":     1,
		"LOAD_GRP_CHG_GROUP_ATTR": 2,
	}
)

func (x LOAD_GROUP_REASON) Enum() *LOAD_GROUP_REASON {
	p := new(LOAD_GROUP_REASON)
	*p = x
	return p
}

func (x LOAD_GROUP_REASON) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LOAD_GROUP_REASON) Descriptor() protoreflect.EnumDescriptor {
	return file_ss_proto_enumTypes[5].Descriptor()
}

func (LOAD_GROUP_REASON) Type() protoreflect.EnumType {
	return &file_ss_proto_enumTypes[5]
}

func (x LOAD_GROUP_REASON) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LOAD_GROUP_REASON.Descriptor instead.
func (LOAD_GROUP_REASON) EnumDescriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{5}
}

//main msg
type SSMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoType SS_PROTO_TYPE `protobuf:"varint,1,opt,name=proto_type,json=protoType,proto3,enum=ss.SS_PROTO_TYPE" json:"proto_type,omitempty"`
	// Types that are assignable to MsgBody:
	//	*SSMsg_HeartBeatReq
	//	*SSMsg_PingReq
	//	*SSMsg_PingRsp
	//	*SSMsg_LoginReq
	//	*SSMsg_LoginRsp
	//	*SSMsg_LogoutReq
	//	*SSMsg_LogoutRsp
	//	*SSMsg_RegReq
	//	*SSMsg_RegRsp
	//	*SSMsg_CreateGroupReq
	//	*SSMsg_CreateGroupRsp
	//	*SSMsg_MsgDisp
	//	*SSMsg_ApplyGroupReq
	//	*SSMsg_ApplyGroupRsp
	//	*SSMsg_ApplyGroupNotify
	//	*SSMsg_ApplyGroupAudit
	//	*SSMsg_FetchApplyReq
	//	*SSMsg_FetchApplyRsp
	//	*SSMsg_CommonNotify
	//	*SSMsg_FetchAuditReq
	//	*SSMsg_FetchAuditRsp
	//	*SSMsg_EnterGroupReq
	//	*SSMsg_EnterGroupRsp
	//	*SSMsg_LoadGroupReq
	//	*SSMsg_LoadGroupRsp
	//	*SSMsg_SendChatReq
	//	*SSMsg_SendChatRsp
	//	*SSMsg_SaveGroupReq
	//	*SSMsg_SaveGroupRsp
	//	*SSMsg_FetchChatReq
	//	*SSMsg_FetchChatRsp
	//	*SSMsg_SyncChatList
	//	*SSMsg_ExitGroupReq
	//	*SSMsg_ExitGroupRsp
	//	*SSMsg_KickGroupReq
	//	*SSMsg_KickGroupRsp
	//	*SSMsg_FetchOfflineInfoReq
	//	*SSMsg_FetchOfflineInfoRsp
	//	*SSMsg_QueryGroupReq
	//	*SSMsg_SyncGroupInfo
	//	*SSMsg_FetchUserProfileReq
	//	*SSMsg_FetchUserProfileRsp
	//	*SSMsg_SaveUserProfileReq
	//	*SSMsg_ChgGroupAttrReq
	//	*SSMsg_ChgGroupAttrRsp
	//	*SSMsg_GroupGroundReq
	//	*SSMsg_GroupGroundRsp
	MsgBody isSSMsg_MsgBody `protobuf_oneof:"msg_body"`
}

func (x *SSMsg) Reset() {
	*x = SSMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSMsg) ProtoMessage() {}

func (x *SSMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSMsg.ProtoReflect.Descriptor instead.
func (*SSMsg) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{0}
}

func (x *SSMsg) GetProtoType() SS_PROTO_TYPE {
	if x != nil {
		return x.ProtoType
	}
	return SS_PROTO_TYPE_HEART_BEAT_REQ
}

func (m *SSMsg) GetMsgBody() isSSMsg_MsgBody {
	if m != nil {
		return m.MsgBody
	}
	return nil
}

func (x *SSMsg) GetHeartBeatReq() *MsgHeartBeatReq {
	if x, ok := x.GetMsgBody().(*SSMsg_HeartBeatReq); ok {
		return x.HeartBeatReq
	}
	return nil
}

func (x *SSMsg) GetPingReq() *MsgPingReq {
	if x, ok := x.GetMsgBody().(*SSMsg_PingReq); ok {
		return x.PingReq
	}
	return nil
}

func (x *SSMsg) GetPingRsp() *MsgPingRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_PingRsp); ok {
		return x.PingRsp
	}
	return nil
}

func (x *SSMsg) GetLoginReq() *MsgLoginReq {
	if x, ok := x.GetMsgBody().(*SSMsg_LoginReq); ok {
		return x.LoginReq
	}
	return nil
}

func (x *SSMsg) GetLoginRsp() *MsgLoginRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_LoginRsp); ok {
		return x.LoginRsp
	}
	return nil
}

func (x *SSMsg) GetLogoutReq() *MsgLogoutReq {
	if x, ok := x.GetMsgBody().(*SSMsg_LogoutReq); ok {
		return x.LogoutReq
	}
	return nil
}

func (x *SSMsg) GetLogoutRsp() *MsgLogoutRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_LogoutRsp); ok {
		return x.LogoutRsp
	}
	return nil
}

func (x *SSMsg) GetRegReq() *MsgRegReq {
	if x, ok := x.GetMsgBody().(*SSMsg_RegReq); ok {
		return x.RegReq
	}
	return nil
}

func (x *SSMsg) GetRegRsp() *MsgRegRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_RegRsp); ok {
		return x.RegRsp
	}
	return nil
}

func (x *SSMsg) GetCreateGroupReq() *MsgCreateGrpReq {
	if x, ok := x.GetMsgBody().(*SSMsg_CreateGroupReq); ok {
		return x.CreateGroupReq
	}
	return nil
}

func (x *SSMsg) GetCreateGroupRsp() *MsgCreateGrpRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_CreateGroupRsp); ok {
		return x.CreateGroupRsp
	}
	return nil
}

func (x *SSMsg) GetMsgDisp() *MsgDisp {
	if x, ok := x.GetMsgBody().(*SSMsg_MsgDisp); ok {
		return x.MsgDisp
	}
	return nil
}

func (x *SSMsg) GetApplyGroupReq() *MsgApplyGroupReq {
	if x, ok := x.GetMsgBody().(*SSMsg_ApplyGroupReq); ok {
		return x.ApplyGroupReq
	}
	return nil
}

func (x *SSMsg) GetApplyGroupRsp() *MsgApplyGroupRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_ApplyGroupRsp); ok {
		return x.ApplyGroupRsp
	}
	return nil
}

func (x *SSMsg) GetApplyGroupNotify() *MsgApplyGroupNotify {
	if x, ok := x.GetMsgBody().(*SSMsg_ApplyGroupNotify); ok {
		return x.ApplyGroupNotify
	}
	return nil
}

func (x *SSMsg) GetApplyGroupAudit() *MsgApplyGroupAudit {
	if x, ok := x.GetMsgBody().(*SSMsg_ApplyGroupAudit); ok {
		return x.ApplyGroupAudit
	}
	return nil
}

func (x *SSMsg) GetFetchApplyReq() *MsgFetchApplyGrpReq {
	if x, ok := x.GetMsgBody().(*SSMsg_FetchApplyReq); ok {
		return x.FetchApplyReq
	}
	return nil
}

func (x *SSMsg) GetFetchApplyRsp() *MsgFetchApplyGrpRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_FetchApplyRsp); ok {
		return x.FetchApplyRsp
	}
	return nil
}

func (x *SSMsg) GetCommonNotify() *MsgCommonNotify {
	if x, ok := x.GetMsgBody().(*SSMsg_CommonNotify); ok {
		return x.CommonNotify
	}
	return nil
}

func (x *SSMsg) GetFetchAuditReq() *MsgFetchAuditGrpReq {
	if x, ok := x.GetMsgBody().(*SSMsg_FetchAuditReq); ok {
		return x.FetchAuditReq
	}
	return nil
}

func (x *SSMsg) GetFetchAuditRsp() *MsgFetchAuditGrpRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_FetchAuditRsp); ok {
		return x.FetchAuditRsp
	}
	return nil
}

func (x *SSMsg) GetEnterGroupReq() *MsgEnterGroupReq {
	if x, ok := x.GetMsgBody().(*SSMsg_EnterGroupReq); ok {
		return x.EnterGroupReq
	}
	return nil
}

func (x *SSMsg) GetEnterGroupRsp() *MsgEnterGroupRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_EnterGroupRsp); ok {
		return x.EnterGroupRsp
	}
	return nil
}

func (x *SSMsg) GetLoadGroupReq() *MsgLoadGroupReq {
	if x, ok := x.GetMsgBody().(*SSMsg_LoadGroupReq); ok {
		return x.LoadGroupReq
	}
	return nil
}

func (x *SSMsg) GetLoadGroupRsp() *MsgLoadGroupRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_LoadGroupRsp); ok {
		return x.LoadGroupRsp
	}
	return nil
}

func (x *SSMsg) GetSendChatReq() *MsgSendChatReq {
	if x, ok := x.GetMsgBody().(*SSMsg_SendChatReq); ok {
		return x.SendChatReq
	}
	return nil
}

func (x *SSMsg) GetSendChatRsp() *MsgSendChatRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_SendChatRsp); ok {
		return x.SendChatRsp
	}
	return nil
}

func (x *SSMsg) GetSaveGroupReq() *MsgSaveGroupReq {
	if x, ok := x.GetMsgBody().(*SSMsg_SaveGroupReq); ok {
		return x.SaveGroupReq
	}
	return nil
}

func (x *SSMsg) GetSaveGroupRsp() *MsgSaveGroupRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_SaveGroupRsp); ok {
		return x.SaveGroupRsp
	}
	return nil
}

func (x *SSMsg) GetFetchChatReq() *MsgFetchChatReq {
	if x, ok := x.GetMsgBody().(*SSMsg_FetchChatReq); ok {
		return x.FetchChatReq
	}
	return nil
}

func (x *SSMsg) GetFetchChatRsp() *MsgFetchChatRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_FetchChatRsp); ok {
		return x.FetchChatRsp
	}
	return nil
}

func (x *SSMsg) GetSyncChatList() *MsgSyncChatList {
	if x, ok := x.GetMsgBody().(*SSMsg_SyncChatList); ok {
		return x.SyncChatList
	}
	return nil
}

func (x *SSMsg) GetExitGroupReq() *MsgExitGroupReq {
	if x, ok := x.GetMsgBody().(*SSMsg_ExitGroupReq); ok {
		return x.ExitGroupReq
	}
	return nil
}

func (x *SSMsg) GetExitGroupRsp() *MsgExitGroupRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_ExitGroupRsp); ok {
		return x.ExitGroupRsp
	}
	return nil
}

func (x *SSMsg) GetKickGroupReq() *MsgKickGroupReq {
	if x, ok := x.GetMsgBody().(*SSMsg_KickGroupReq); ok {
		return x.KickGroupReq
	}
	return nil
}

func (x *SSMsg) GetKickGroupRsp() *MsgKickGroupRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_KickGroupRsp); ok {
		return x.KickGroupRsp
	}
	return nil
}

func (x *SSMsg) GetFetchOfflineInfoReq() *MsgFetchOfflineInfoReq {
	if x, ok := x.GetMsgBody().(*SSMsg_FetchOfflineInfoReq); ok {
		return x.FetchOfflineInfoReq
	}
	return nil
}

func (x *SSMsg) GetFetchOfflineInfoRsp() *MsgFetchOfflineInfoRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_FetchOfflineInfoRsp); ok {
		return x.FetchOfflineInfoRsp
	}
	return nil
}

func (x *SSMsg) GetQueryGroupReq() *MsgQueryGroupReq {
	if x, ok := x.GetMsgBody().(*SSMsg_QueryGroupReq); ok {
		return x.QueryGroupReq
	}
	return nil
}

func (x *SSMsg) GetSyncGroupInfo() *MsgSyncGroupInfo {
	if x, ok := x.GetMsgBody().(*SSMsg_SyncGroupInfo); ok {
		return x.SyncGroupInfo
	}
	return nil
}

func (x *SSMsg) GetFetchUserProfileReq() *MsgFetchUserProfileReq {
	if x, ok := x.GetMsgBody().(*SSMsg_FetchUserProfileReq); ok {
		return x.FetchUserProfileReq
	}
	return nil
}

func (x *SSMsg) GetFetchUserProfileRsp() *MsgFetchUserProfileRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_FetchUserProfileRsp); ok {
		return x.FetchUserProfileRsp
	}
	return nil
}

func (x *SSMsg) GetSaveUserProfileReq() *MsgSaveUserProfileReq {
	if x, ok := x.GetMsgBody().(*SSMsg_SaveUserProfileReq); ok {
		return x.SaveUserProfileReq
	}
	return nil
}

func (x *SSMsg) GetChgGroupAttrReq() *MsgChgGroupAttrReq {
	if x, ok := x.GetMsgBody().(*SSMsg_ChgGroupAttrReq); ok {
		return x.ChgGroupAttrReq
	}
	return nil
}

func (x *SSMsg) GetChgGroupAttrRsp() *MsgChgGroupAttrRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_ChgGroupAttrRsp); ok {
		return x.ChgGroupAttrRsp
	}
	return nil
}

func (x *SSMsg) GetGroupGroundReq() *MsgGroupGroudReq {
	if x, ok := x.GetMsgBody().(*SSMsg_GroupGroundReq); ok {
		return x.GroupGroundReq
	}
	return nil
}

func (x *SSMsg) GetGroupGroundRsp() *MsgGroupGroudRsp {
	if x, ok := x.GetMsgBody().(*SSMsg_GroupGroundRsp); ok {
		return x.GroupGroundRsp
	}
	return nil
}

type isSSMsg_MsgBody interface {
	isSSMsg_MsgBody()
}

type SSMsg_HeartBeatReq struct {
	HeartBeatReq *MsgHeartBeatReq `protobuf:"bytes,20,opt,name=heart_beat_req,json=heartBeatReq,proto3,oneof"`
}

type SSMsg_PingReq struct {
	PingReq *MsgPingReq `protobuf:"bytes,22,opt,name=ping_req,json=pingReq,proto3,oneof"`
}

type SSMsg_PingRsp struct {
	PingRsp *MsgPingRsp `protobuf:"bytes,23,opt,name=ping_rsp,json=pingRsp,proto3,oneof"`
}

type SSMsg_LoginReq struct {
	LoginReq *MsgLoginReq `protobuf:"bytes,24,opt,name=login_req,json=loginReq,proto3,oneof"`
}

type SSMsg_LoginRsp struct {
	LoginRsp *MsgLoginRsp `protobuf:"bytes,25,opt,name=login_rsp,json=loginRsp,proto3,oneof"`
}

type SSMsg_LogoutReq struct {
	LogoutReq *MsgLogoutReq `protobuf:"bytes,26,opt,name=logout_req,json=logoutReq,proto3,oneof"`
}

type SSMsg_LogoutRsp struct {
	LogoutRsp *MsgLogoutRsp `protobuf:"bytes,27,opt,name=logout_rsp,json=logoutRsp,proto3,oneof"`
}

type SSMsg_RegReq struct {
	RegReq *MsgRegReq `protobuf:"bytes,28,opt,name=reg_req,json=regReq,proto3,oneof"`
}

type SSMsg_RegRsp struct {
	RegRsp *MsgRegRsp `protobuf:"bytes,29,opt,name=reg_rsp,json=regRsp,proto3,oneof"`
}

type SSMsg_CreateGroupReq struct {
	CreateGroupReq *MsgCreateGrpReq `protobuf:"bytes,30,opt,name=create_group_req,json=createGroupReq,proto3,oneof"`
}

type SSMsg_CreateGroupRsp struct {
	CreateGroupRsp *MsgCreateGrpRsp `protobuf:"bytes,31,opt,name=create_group_rsp,json=createGroupRsp,proto3,oneof"`
}

type SSMsg_MsgDisp struct {
	MsgDisp *MsgDisp `protobuf:"bytes,32,opt,name=msg_disp,json=msgDisp,proto3,oneof"`
}

type SSMsg_ApplyGroupReq struct {
	ApplyGroupReq *MsgApplyGroupReq `protobuf:"bytes,34,opt,name=apply_group_req,json=applyGroupReq,proto3,oneof"`
}

type SSMsg_ApplyGroupRsp struct {
	ApplyGroupRsp *MsgApplyGroupRsp `protobuf:"bytes,35,opt,name=apply_group_rsp,json=applyGroupRsp,proto3,oneof"`
}

type SSMsg_ApplyGroupNotify struct {
	ApplyGroupNotify *MsgApplyGroupNotify `protobuf:"bytes,36,opt,name=apply_group_notify,json=applyGroupNotify,proto3,oneof"`
}

type SSMsg_ApplyGroupAudit struct {
	ApplyGroupAudit *MsgApplyGroupAudit `protobuf:"bytes,37,opt,name=apply_group_audit,json=applyGroupAudit,proto3,oneof"`
}

type SSMsg_FetchApplyReq struct {
	FetchApplyReq *MsgFetchApplyGrpReq `protobuf:"bytes,38,opt,name=fetch_apply_req,json=fetchApplyReq,proto3,oneof"`
}

type SSMsg_FetchApplyRsp struct {
	FetchApplyRsp *MsgFetchApplyGrpRsp `protobuf:"bytes,39,opt,name=fetch_apply_rsp,json=fetchApplyRsp,proto3,oneof"`
}

type SSMsg_CommonNotify struct {
	CommonNotify *MsgCommonNotify `protobuf:"bytes,40,opt,name=common_notify,json=commonNotify,proto3,oneof"`
}

type SSMsg_FetchAuditReq struct {
	FetchAuditReq *MsgFetchAuditGrpReq `protobuf:"bytes,41,opt,name=fetch_audit_req,json=fetchAuditReq,proto3,oneof"`
}

type SSMsg_FetchAuditRsp struct {
	FetchAuditRsp *MsgFetchAuditGrpRsp `protobuf:"bytes,42,opt,name=fetch_audit_rsp,json=fetchAuditRsp,proto3,oneof"`
}

type SSMsg_EnterGroupReq struct {
	EnterGroupReq *MsgEnterGroupReq `protobuf:"bytes,43,opt,name=enter_group_req,json=enterGroupReq,proto3,oneof"`
}

type SSMsg_EnterGroupRsp struct {
	EnterGroupRsp *MsgEnterGroupRsp `protobuf:"bytes,44,opt,name=enter_group_rsp,json=enterGroupRsp,proto3,oneof"`
}

type SSMsg_LoadGroupReq struct {
	LoadGroupReq *MsgLoadGroupReq `protobuf:"bytes,45,opt,name=load_group_req,json=loadGroupReq,proto3,oneof"`
}

type SSMsg_LoadGroupRsp struct {
	LoadGroupRsp *MsgLoadGroupRsp `protobuf:"bytes,46,opt,name=load_group_rsp,json=loadGroupRsp,proto3,oneof"`
}

type SSMsg_SendChatReq struct {
	SendChatReq *MsgSendChatReq `protobuf:"bytes,47,opt,name=send_chat_req,json=sendChatReq,proto3,oneof"`
}

type SSMsg_SendChatRsp struct {
	SendChatRsp *MsgSendChatRsp `protobuf:"bytes,48,opt,name=send_chat_rsp,json=sendChatRsp,proto3,oneof"`
}

type SSMsg_SaveGroupReq struct {
	SaveGroupReq *MsgSaveGroupReq `protobuf:"bytes,49,opt,name=save_group_req,json=saveGroupReq,proto3,oneof"`
}

type SSMsg_SaveGroupRsp struct {
	SaveGroupRsp *MsgSaveGroupRsp `protobuf:"bytes,50,opt,name=save_group_rsp,json=saveGroupRsp,proto3,oneof"`
}

type SSMsg_FetchChatReq struct {
	FetchChatReq *MsgFetchChatReq `protobuf:"bytes,51,opt,name=fetch_chat_req,json=fetchChatReq,proto3,oneof"`
}

type SSMsg_FetchChatRsp struct {
	FetchChatRsp *MsgFetchChatRsp `protobuf:"bytes,52,opt,name=fetch_chat_rsp,json=fetchChatRsp,proto3,oneof"`
}

type SSMsg_SyncChatList struct {
	SyncChatList *MsgSyncChatList `protobuf:"bytes,53,opt,name=sync_chat_list,json=syncChatList,proto3,oneof"`
}

type SSMsg_ExitGroupReq struct {
	ExitGroupReq *MsgExitGroupReq `protobuf:"bytes,54,opt,name=exit_group_req,json=exitGroupReq,proto3,oneof"`
}

type SSMsg_ExitGroupRsp struct {
	ExitGroupRsp *MsgExitGroupRsp `protobuf:"bytes,55,opt,name=exit_group_rsp,json=exitGroupRsp,proto3,oneof"`
}

type SSMsg_KickGroupReq struct {
	KickGroupReq *MsgKickGroupReq `protobuf:"bytes,56,opt,name=kick_group_req,json=kickGroupReq,proto3,oneof"`
}

type SSMsg_KickGroupRsp struct {
	KickGroupRsp *MsgKickGroupRsp `protobuf:"bytes,57,opt,name=kick_group_rsp,json=kickGroupRsp,proto3,oneof"`
}

type SSMsg_FetchOfflineInfoReq struct {
	FetchOfflineInfoReq *MsgFetchOfflineInfoReq `protobuf:"bytes,58,opt,name=fetch_offline_info_req,json=fetchOfflineInfoReq,proto3,oneof"`
}

type SSMsg_FetchOfflineInfoRsp struct {
	FetchOfflineInfoRsp *MsgFetchOfflineInfoRsp `protobuf:"bytes,59,opt,name=fetch_offline_info_rsp,json=fetchOfflineInfoRsp,proto3,oneof"`
}

type SSMsg_QueryGroupReq struct {
	QueryGroupReq *MsgQueryGroupReq `protobuf:"bytes,60,opt,name=query_group_req,json=queryGroupReq,proto3,oneof"`
}

type SSMsg_SyncGroupInfo struct {
	SyncGroupInfo *MsgSyncGroupInfo `protobuf:"bytes,61,opt,name=sync_group_info,json=syncGroupInfo,proto3,oneof"`
}

type SSMsg_FetchUserProfileReq struct {
	FetchUserProfileReq *MsgFetchUserProfileReq `protobuf:"bytes,62,opt,name=fetch_user_profile_req,json=fetchUserProfileReq,proto3,oneof"`
}

type SSMsg_FetchUserProfileRsp struct {
	FetchUserProfileRsp *MsgFetchUserProfileRsp `protobuf:"bytes,63,opt,name=fetch_user_profile_rsp,json=fetchUserProfileRsp,proto3,oneof"`
}

type SSMsg_SaveUserProfileReq struct {
	SaveUserProfileReq *MsgSaveUserProfileReq `protobuf:"bytes,64,opt,name=save_user_profile_req,json=saveUserProfileReq,proto3,oneof"`
}

type SSMsg_ChgGroupAttrReq struct {
	ChgGroupAttrReq *MsgChgGroupAttrReq `protobuf:"bytes,65,opt,name=chg_group_attr_req,json=chgGroupAttrReq,proto3,oneof"`
}

type SSMsg_ChgGroupAttrRsp struct {
	ChgGroupAttrRsp *MsgChgGroupAttrRsp `protobuf:"bytes,66,opt,name=chg_group_attr_rsp,json=chgGroupAttrRsp,proto3,oneof"`
}

type SSMsg_GroupGroundReq struct {
	GroupGroundReq *MsgGroupGroudReq `protobuf:"bytes,67,opt,name=group_ground_req,json=groupGroundReq,proto3,oneof"`
}

type SSMsg_GroupGroundRsp struct {
	GroupGroundRsp *MsgGroupGroudRsp `protobuf:"bytes,68,opt,name=group_ground_rsp,json=groupGroundRsp,proto3,oneof"`
}

func (*SSMsg_HeartBeatReq) isSSMsg_MsgBody() {}

func (*SSMsg_PingReq) isSSMsg_MsgBody() {}

func (*SSMsg_PingRsp) isSSMsg_MsgBody() {}

func (*SSMsg_LoginReq) isSSMsg_MsgBody() {}

func (*SSMsg_LoginRsp) isSSMsg_MsgBody() {}

func (*SSMsg_LogoutReq) isSSMsg_MsgBody() {}

func (*SSMsg_LogoutRsp) isSSMsg_MsgBody() {}

func (*SSMsg_RegReq) isSSMsg_MsgBody() {}

func (*SSMsg_RegRsp) isSSMsg_MsgBody() {}

func (*SSMsg_CreateGroupReq) isSSMsg_MsgBody() {}

func (*SSMsg_CreateGroupRsp) isSSMsg_MsgBody() {}

func (*SSMsg_MsgDisp) isSSMsg_MsgBody() {}

func (*SSMsg_ApplyGroupReq) isSSMsg_MsgBody() {}

func (*SSMsg_ApplyGroupRsp) isSSMsg_MsgBody() {}

func (*SSMsg_ApplyGroupNotify) isSSMsg_MsgBody() {}

func (*SSMsg_ApplyGroupAudit) isSSMsg_MsgBody() {}

func (*SSMsg_FetchApplyReq) isSSMsg_MsgBody() {}

func (*SSMsg_FetchApplyRsp) isSSMsg_MsgBody() {}

func (*SSMsg_CommonNotify) isSSMsg_MsgBody() {}

func (*SSMsg_FetchAuditReq) isSSMsg_MsgBody() {}

func (*SSMsg_FetchAuditRsp) isSSMsg_MsgBody() {}

func (*SSMsg_EnterGroupReq) isSSMsg_MsgBody() {}

func (*SSMsg_EnterGroupRsp) isSSMsg_MsgBody() {}

func (*SSMsg_LoadGroupReq) isSSMsg_MsgBody() {}

func (*SSMsg_LoadGroupRsp) isSSMsg_MsgBody() {}

func (*SSMsg_SendChatReq) isSSMsg_MsgBody() {}

func (*SSMsg_SendChatRsp) isSSMsg_MsgBody() {}

func (*SSMsg_SaveGroupReq) isSSMsg_MsgBody() {}

func (*SSMsg_SaveGroupRsp) isSSMsg_MsgBody() {}

func (*SSMsg_FetchChatReq) isSSMsg_MsgBody() {}

func (*SSMsg_FetchChatRsp) isSSMsg_MsgBody() {}

func (*SSMsg_SyncChatList) isSSMsg_MsgBody() {}

func (*SSMsg_ExitGroupReq) isSSMsg_MsgBody() {}

func (*SSMsg_ExitGroupRsp) isSSMsg_MsgBody() {}

func (*SSMsg_KickGroupReq) isSSMsg_MsgBody() {}

func (*SSMsg_KickGroupRsp) isSSMsg_MsgBody() {}

func (*SSMsg_FetchOfflineInfoReq) isSSMsg_MsgBody() {}

func (*SSMsg_FetchOfflineInfoRsp) isSSMsg_MsgBody() {}

func (*SSMsg_QueryGroupReq) isSSMsg_MsgBody() {}

func (*SSMsg_SyncGroupInfo) isSSMsg_MsgBody() {}

func (*SSMsg_FetchUserProfileReq) isSSMsg_MsgBody() {}

func (*SSMsg_FetchUserProfileRsp) isSSMsg_MsgBody() {}

func (*SSMsg_SaveUserProfileReq) isSSMsg_MsgBody() {}

func (*SSMsg_ChgGroupAttrReq) isSSMsg_MsgBody() {}

func (*SSMsg_ChgGroupAttrRsp) isSSMsg_MsgBody() {}

func (*SSMsg_GroupGroundReq) isSSMsg_MsgBody() {}

func (*SSMsg_GroupGroundRsp) isSSMsg_MsgBody() {}

//heartbeat
type MsgHeartBeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts int64 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *MsgHeartBeatReq) Reset() {
	*x = MsgHeartBeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHeartBeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHeartBeatReq) ProtoMessage() {}

func (x *MsgHeartBeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHeartBeatReq.ProtoReflect.Descriptor instead.
func (*MsgHeartBeatReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{1}
}

func (x *MsgHeartBeatReq) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

//ping
type MsgPingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts        int64 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	ClientKey int64 `protobuf:"varint,2,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
}

func (x *MsgPingReq) Reset() {
	*x = MsgPingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPingReq) ProtoMessage() {}

func (x *MsgPingReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgPingReq.ProtoReflect.Descriptor instead.
func (*MsgPingReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{2}
}

func (x *MsgPingReq) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *MsgPingReq) GetClientKey() int64 {
	if x != nil {
		return x.ClientKey
	}
	return 0
}

type MsgPingRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts        int64 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	ClientKey int64 `protobuf:"varint,2,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
}

func (x *MsgPingRsp) Reset() {
	*x = MsgPingRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPingRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPingRsp) ProtoMessage() {}

func (x *MsgPingRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgPingRsp.ProtoReflect.Descriptor instead.
func (*MsgPingRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{3}
}

func (x *MsgPingRsp) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *MsgPingRsp) GetClientKey() int64 {
	if x != nil {
		return x.ClientKey
	}
	return 0
}

//login
type MsgLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CKey    int64  `protobuf:"varint,20,opt,name=c_key,json=cKey,proto3" json:"c_key,omitempty"`
	Uid     int64  `protobuf:"varint,21,opt,name=uid,proto3" json:"uid,omitempty"`  //0 use default role
	Name    string `protobuf:"bytes,22,opt,name=name,proto3" json:"name,omitempty"` //acc name
	Pass    string `protobuf:"bytes,23,opt,name=pass,proto3" json:"pass,omitempty"`
	Device  string `protobuf:"bytes,24,opt,name=device,proto3" json:"device,omitempty"`
	Version string `protobuf:"bytes,25,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *MsgLoginReq) Reset() {
	*x = MsgLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgLoginReq) ProtoMessage() {}

func (x *MsgLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgLoginReq.ProtoReflect.Descriptor instead.
func (*MsgLoginReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{4}
}

func (x *MsgLoginReq) GetCKey() int64 {
	if x != nil {
		return x.CKey
	}
	return 0
}

func (x *MsgLoginReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgLoginReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MsgLoginReq) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *MsgLoginReq) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *MsgLoginReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type MsgLoginRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      USER_LOGIN_RET `protobuf:"varint,1,opt,name=result,proto3,enum=ss.USER_LOGIN_RET" json:"result,omitempty"`
	CKey        int64          `protobuf:"varint,2,opt,name=c_key,json=cKey,proto3" json:"c_key,omitempty"`
	Name        string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` //acc name
	Uid         int64          `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`  //may empty
	UserInfo    *UserInfo      `protobuf:"bytes,20,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	OnlineLogic int32          `protobuf:"varint,21,opt,name=online_logic,json=onlineLogic,proto3" json:"online_logic,omitempty"`
}

func (x *MsgLoginRsp) Reset() {
	*x = MsgLoginRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgLoginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgLoginRsp) ProtoMessage() {}

func (x *MsgLoginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgLoginRsp.ProtoReflect.Descriptor instead.
func (*MsgLoginRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{5}
}

func (x *MsgLoginRsp) GetResult() USER_LOGIN_RET {
	if x != nil {
		return x.Result
	}
	return USER_LOGIN_RET_LOGIN_SUCCESS
}

func (x *MsgLoginRsp) GetCKey() int64 {
	if x != nil {
		return x.CKey
	}
	return 0
}

func (x *MsgLoginRsp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MsgLoginRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgLoginRsp) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *MsgLoginRsp) GetOnlineLogic() int32 {
	if x != nil {
		return x.OnlineLogic
	}
	return 0
}

type MsgLogoutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64              `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Reason   USER_LOGOUT_REASON `protobuf:"varint,2,opt,name=reason,proto3,enum=ss.USER_LOGOUT_REASON" json:"reason,omitempty"`
	UserInfo *UserInfo          `protobuf:"bytes,3,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
}

func (x *MsgLogoutReq) Reset() {
	*x = MsgLogoutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgLogoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgLogoutReq) ProtoMessage() {}

func (x *MsgLogoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgLogoutReq.ProtoReflect.Descriptor instead.
func (*MsgLogoutReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{6}
}

func (x *MsgLogoutReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgLogoutReq) GetReason() USER_LOGOUT_REASON {
	if x != nil {
		return x.Reason
	}
	return USER_LOGOUT_REASON_LOGOUT_CLIENT_EXIT
}

func (x *MsgLogoutReq) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type MsgLogoutRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64              `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Reason USER_LOGOUT_REASON `protobuf:"varint,2,opt,name=reason,proto3,enum=ss.USER_LOGOUT_REASON" json:"reason,omitempty"`
	Msg    string             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *MsgLogoutRsp) Reset() {
	*x = MsgLogoutRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgLogoutRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgLogoutRsp) ProtoMessage() {}

func (x *MsgLogoutRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgLogoutRsp.ProtoReflect.Descriptor instead.
func (*MsgLogoutRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{7}
}

func (x *MsgLogoutRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgLogoutRsp) GetReason() USER_LOGOUT_REASON {
	if x != nil {
		return x.Reason
	}
	return USER_LOGOUT_REASON_LOGOUT_CLIENT_EXIT
}

func (x *MsgLogoutRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

//register
type MsgRegReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CKey     int64  `protobuf:"varint,20,opt,name=c_key,json=cKey,proto3" json:"c_key,omitempty"`
	Name     string `protobuf:"bytes,21,opt,name=name,proto3" json:"name,omitempty"` //account name
	Pass     string `protobuf:"bytes,22,opt,name=pass,proto3" json:"pass,omitempty"`
	RoleName string `protobuf:"bytes,23,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"` //role name
	Sex      bool   `protobuf:"varint,24,opt,name=sex,proto3" json:"sex,omitempty"`
	Addr     string `protobuf:"bytes,25,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *MsgRegReq) Reset() {
	*x = MsgRegReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRegReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRegReq) ProtoMessage() {}

func (x *MsgRegReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgRegReq.ProtoReflect.Descriptor instead.
func (*MsgRegReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{8}
}

func (x *MsgRegReq) GetCKey() int64 {
	if x != nil {
		return x.CKey
	}
	return 0
}

func (x *MsgRegReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MsgRegReq) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *MsgRegReq) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *MsgRegReq) GetSex() bool {
	if x != nil {
		return x.Sex
	}
	return false
}

func (x *MsgRegReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type MsgRegRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result REG_RESULT `protobuf:"varint,1,opt,name=result,proto3,enum=ss.REG_RESULT" json:"result,omitempty"`
	CKey   int64      `protobuf:"varint,2,opt,name=c_key,json=cKey,proto3" json:"c_key,omitempty"`
	Name   string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MsgRegRsp) Reset() {
	*x = MsgRegRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRegRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRegRsp) ProtoMessage() {}

func (x *MsgRegRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgRegRsp.ProtoReflect.Descriptor instead.
func (*MsgRegRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{9}
}

func (x *MsgRegRsp) GetResult() REG_RESULT {
	if x != nil {
		return x.Result
	}
	return REG_RESULT_REG_SUCCESS
}

func (x *MsgRegRsp) GetCKey() int64 {
	if x != nil {
		return x.CKey
	}
	return 0
}

func (x *MsgRegRsp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MsgCreateGrpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GrpName string `protobuf:"bytes,2,opt,name=grp_name,json=grpName,proto3" json:"grp_name,omitempty"`
	GrpPass string `protobuf:"bytes,3,opt,name=grp_pass,json=grpPass,proto3" json:"grp_pass,omitempty"`
}

func (x *MsgCreateGrpReq) Reset() {
	*x = MsgCreateGrpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCreateGrpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCreateGrpReq) ProtoMessage() {}

func (x *MsgCreateGrpReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCreateGrpReq.ProtoReflect.Descriptor instead.
func (*MsgCreateGrpReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{10}
}

func (x *MsgCreateGrpReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgCreateGrpReq) GetGrpName() string {
	if x != nil {
		return x.GrpName
	}
	return ""
}

func (x *MsgCreateGrpReq) GetGrpPass() string {
	if x != nil {
		return x.GrpPass
	}
	return ""
}

type MsgCreateGrpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      CREATE_GROUP_RESULT `protobuf:"varint,1,opt,name=ret,proto3,enum=ss.CREATE_GROUP_RESULT" json:"ret,omitempty"`
	Uid      int64               `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	GrpId    int64               `protobuf:"varint,3,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	GrpName  string              `protobuf:"bytes,4,opt,name=grp_name,json=grpName,proto3" json:"grp_name,omitempty"`
	MemCount int32               `protobuf:"varint,5,opt,name=mem_count,json=memCount,proto3" json:"mem_count,omitempty"`
	CreateTs int64               `protobuf:"varint,6,opt,name=create_ts,json=createTs,proto3" json:"create_ts,omitempty"`
}

func (x *MsgCreateGrpRsp) Reset() {
	*x = MsgCreateGrpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCreateGrpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCreateGrpRsp) ProtoMessage() {}

func (x *MsgCreateGrpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCreateGrpRsp.ProtoReflect.Descriptor instead.
func (*MsgCreateGrpRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{11}
}

func (x *MsgCreateGrpRsp) GetRet() CREATE_GROUP_RESULT {
	if x != nil {
		return x.Ret
	}
	return CREATE_GROUP_RESULT_CREATE_RET_SUCCESS
}

func (x *MsgCreateGrpRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgCreateGrpRsp) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgCreateGrpRsp) GetGrpName() string {
	if x != nil {
		return x.GrpName
	}
	return ""
}

func (x *MsgCreateGrpRsp) GetMemCount() int32 {
	if x != nil {
		return x.MemCount
	}
	return 0
}

func (x *MsgCreateGrpRsp) GetCreateTs() int64 {
	if x != nil {
		return x.CreateTs
	}
	return 0
}

//Fetch Apply Group
type MsgFetchApplyGrpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FetchCount int32 `protobuf:"varint,2,opt,name=fetch_count,json=fetchCount,proto3" json:"fetch_count,omitempty"`
}

func (x *MsgFetchApplyGrpReq) Reset() {
	*x = MsgFetchApplyGrpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFetchApplyGrpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFetchApplyGrpReq) ProtoMessage() {}

func (x *MsgFetchApplyGrpReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFetchApplyGrpReq.ProtoReflect.Descriptor instead.
func (*MsgFetchApplyGrpReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{12}
}

func (x *MsgFetchApplyGrpReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgFetchApplyGrpReq) GetFetchCount() int32 {
	if x != nil {
		return x.FetchCount
	}
	return 0
}

type MsgFetchApplyGrpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Complete   int32                  `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"` //1:no more
	FetchCount int32                  `protobuf:"varint,3,opt,name=fetch_count,json=fetchCount,proto3" json:"fetch_count,omitempty"`
	NotifyList []*MsgApplyGroupNotify `protobuf:"bytes,20,rep,name=notify_list,json=notifyList,proto3" json:"notify_list,omitempty"`
}

func (x *MsgFetchApplyGrpRsp) Reset() {
	*x = MsgFetchApplyGrpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFetchApplyGrpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFetchApplyGrpRsp) ProtoMessage() {}

func (x *MsgFetchApplyGrpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFetchApplyGrpRsp.ProtoReflect.Descriptor instead.
func (*MsgFetchApplyGrpRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{13}
}

func (x *MsgFetchApplyGrpRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgFetchApplyGrpRsp) GetComplete() int32 {
	if x != nil {
		return x.Complete
	}
	return 0
}

func (x *MsgFetchApplyGrpRsp) GetFetchCount() int32 {
	if x != nil {
		return x.FetchCount
	}
	return 0
}

func (x *MsgFetchApplyGrpRsp) GetNotifyList() []*MsgApplyGroupNotify {
	if x != nil {
		return x.NotifyList
	}
	return nil
}

//Fetch Audit Group
type MsgFetchAuditGrpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FetchCount int32 `protobuf:"varint,2,opt,name=fetch_count,json=fetchCount,proto3" json:"fetch_count,omitempty"`
}

func (x *MsgFetchAuditGrpReq) Reset() {
	*x = MsgFetchAuditGrpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFetchAuditGrpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFetchAuditGrpReq) ProtoMessage() {}

func (x *MsgFetchAuditGrpReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFetchAuditGrpReq.ProtoReflect.Descriptor instead.
func (*MsgFetchAuditGrpReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{14}
}

func (x *MsgFetchAuditGrpReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgFetchAuditGrpReq) GetFetchCount() int32 {
	if x != nil {
		return x.FetchCount
	}
	return 0
}

type MsgFetchAuditGrpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        int64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Complete   int32                 `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"` //1:no more
	FetchCount int32                 `protobuf:"varint,3,opt,name=fetch_count,json=fetchCount,proto3" json:"fetch_count,omitempty"`
	AuditList  []*MsgApplyGroupAudit `protobuf:"bytes,20,rep,name=audit_list,json=auditList,proto3" json:"audit_list,omitempty"`
}

func (x *MsgFetchAuditGrpRsp) Reset() {
	*x = MsgFetchAuditGrpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFetchAuditGrpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFetchAuditGrpRsp) ProtoMessage() {}

func (x *MsgFetchAuditGrpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFetchAuditGrpRsp.ProtoReflect.Descriptor instead.
func (*MsgFetchAuditGrpRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{15}
}

func (x *MsgFetchAuditGrpRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgFetchAuditGrpRsp) GetComplete() int32 {
	if x != nil {
		return x.Complete
	}
	return 0
}

func (x *MsgFetchAuditGrpRsp) GetFetchCount() int32 {
	if x != nil {
		return x.FetchCount
	}
	return 0
}

func (x *MsgFetchAuditGrpRsp) GetAuditList() []*MsgApplyGroupAudit {
	if x != nil {
		return x.AuditList
	}
	return nil
}

type MsgLoadGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason LOAD_GROUP_REASON `protobuf:"varint,1,opt,name=reason,proto3,enum=ss.LOAD_GROUP_REASON" json:"reason,omitempty"`
	GrpId  int64             `protobuf:"varint,2,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	Uid    int64             `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	TempId int64             `protobuf:"varint,4,opt,name=temp_id,json=tempId,proto3" json:"temp_id,omitempty"`
	//carry
	Occoupy int64    `protobuf:"varint,20,opt,name=occoupy,proto3" json:"occoupy,omitempty"`
	IntV    int64    `protobuf:"varint,21,opt,name=int_v,json=intV,proto3" json:"int_v,omitempty"`
	StrV    string   `protobuf:"bytes,22,opt,name=str_v,json=strV,proto3" json:"str_v,omitempty"`
	ChatMsg *ChatMsg `protobuf:"bytes,23,opt,name=chat_msg,json=chatMsg,proto3" json:"chat_msg,omitempty"`
}

func (x *MsgLoadGroupReq) Reset() {
	*x = MsgLoadGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgLoadGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgLoadGroupReq) ProtoMessage() {}

func (x *MsgLoadGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgLoadGroupReq.ProtoReflect.Descriptor instead.
func (*MsgLoadGroupReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{16}
}

func (x *MsgLoadGroupReq) GetReason() LOAD_GROUP_REASON {
	if x != nil {
		return x.Reason
	}
	return LOAD_GROUP_REASON_LOAD_GRP_SEND_CHAT
}

func (x *MsgLoadGroupReq) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgLoadGroupReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgLoadGroupReq) GetTempId() int64 {
	if x != nil {
		return x.TempId
	}
	return 0
}

func (x *MsgLoadGroupReq) GetOccoupy() int64 {
	if x != nil {
		return x.Occoupy
	}
	return 0
}

func (x *MsgLoadGroupReq) GetIntV() int64 {
	if x != nil {
		return x.IntV
	}
	return 0
}

func (x *MsgLoadGroupReq) GetStrV() string {
	if x != nil {
		return x.StrV
	}
	return ""
}

func (x *MsgLoadGroupReq) GetChatMsg() *ChatMsg {
	if x != nil {
		return x.ChatMsg
	}
	return nil
}

type MsgLoadGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason     LOAD_GROUP_REASON `protobuf:"varint,1,opt,name=reason,proto3,enum=ss.LOAD_GROUP_REASON" json:"reason,omitempty"`
	LoadResult SS_COMMON_RESULT  `protobuf:"varint,2,opt,name=load_result,json=loadResult,proto3,enum=ss.SS_COMMON_RESULT" json:"load_result,omitempty"`
	GrpId      int64             `protobuf:"varint,3,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	Uid        int64             `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	TempId     int64             `protobuf:"varint,5,opt,name=temp_id,json=tempId,proto3" json:"temp_id,omitempty"`
	GrpInfo    *GroupInfo        `protobuf:"bytes,6,opt,name=grp_info,json=grpInfo,proto3" json:"grp_info,omitempty"`
	//carry info
	Occoupy int64    `protobuf:"varint,20,opt,name=occoupy,proto3" json:"occoupy,omitempty"`
	IntV    int64    `protobuf:"varint,21,opt,name=int_v,json=intV,proto3" json:"int_v,omitempty"`
	StrV    string   `protobuf:"bytes,22,opt,name=str_v,json=strV,proto3" json:"str_v,omitempty"`
	ChatMsg *ChatMsg `protobuf:"bytes,23,opt,name=chat_msg,json=chatMsg,proto3" json:"chat_msg,omitempty"`
}

func (x *MsgLoadGroupRsp) Reset() {
	*x = MsgLoadGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgLoadGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgLoadGroupRsp) ProtoMessage() {}

func (x *MsgLoadGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgLoadGroupRsp.ProtoReflect.Descriptor instead.
func (*MsgLoadGroupRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{17}
}

func (x *MsgLoadGroupRsp) GetReason() LOAD_GROUP_REASON {
	if x != nil {
		return x.Reason
	}
	return LOAD_GROUP_REASON_LOAD_GRP_SEND_CHAT
}

func (x *MsgLoadGroupRsp) GetLoadResult() SS_COMMON_RESULT {
	if x != nil {
		return x.LoadResult
	}
	return SS_COMMON_RESULT_SUCCESS
}

func (x *MsgLoadGroupRsp) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgLoadGroupRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgLoadGroupRsp) GetTempId() int64 {
	if x != nil {
		return x.TempId
	}
	return 0
}

func (x *MsgLoadGroupRsp) GetGrpInfo() *GroupInfo {
	if x != nil {
		return x.GrpInfo
	}
	return nil
}

func (x *MsgLoadGroupRsp) GetOccoupy() int64 {
	if x != nil {
		return x.Occoupy
	}
	return 0
}

func (x *MsgLoadGroupRsp) GetIntV() int64 {
	if x != nil {
		return x.IntV
	}
	return 0
}

func (x *MsgLoadGroupRsp) GetStrV() string {
	if x != nil {
		return x.StrV
	}
	return ""
}

func (x *MsgLoadGroupRsp) GetChatMsg() *ChatMsg {
	if x != nil {
		return x.ChatMsg
	}
	return nil
}

//Save Group
type MsgSaveGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrpId    int64            `protobuf:"varint,1,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	Reason   SS_COMMON_REASON `protobuf:"varint,2,opt,name=reason,proto3,enum=ss.SS_COMMON_REASON" json:"reason,omitempty"`
	LoadServ int32            `protobuf:"varint,3,opt,name=load_serv,json=loadServ,proto3" json:"load_serv,omitempty"`
	BlobInfo *GroupBlobData   `protobuf:"bytes,4,opt,name=blob_info,json=blobInfo,proto3" json:"blob_info,omitempty"`
	MsgCount int64            `protobuf:"varint,20,opt,name=msg_count,json=msgCount,proto3" json:"msg_count,omitempty"`
	MemCount int32            `protobuf:"varint,21,opt,name=mem_count,json=memCount,proto3" json:"mem_count,omitempty"`
	GrpName  string           `protobuf:"bytes,22,opt,name=grp_name,json=grpName,proto3" json:"grp_name,omitempty"`
}

func (x *MsgSaveGroupReq) Reset() {
	*x = MsgSaveGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSaveGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSaveGroupReq) ProtoMessage() {}

func (x *MsgSaveGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSaveGroupReq.ProtoReflect.Descriptor instead.
func (*MsgSaveGroupReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{18}
}

func (x *MsgSaveGroupReq) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgSaveGroupReq) GetReason() SS_COMMON_REASON {
	if x != nil {
		return x.Reason
	}
	return SS_COMMON_REASON_REASON_TICK
}

func (x *MsgSaveGroupReq) GetLoadServ() int32 {
	if x != nil {
		return x.LoadServ
	}
	return 0
}

func (x *MsgSaveGroupReq) GetBlobInfo() *GroupBlobData {
	if x != nil {
		return x.BlobInfo
	}
	return nil
}

func (x *MsgSaveGroupReq) GetMsgCount() int64 {
	if x != nil {
		return x.MsgCount
	}
	return 0
}

func (x *MsgSaveGroupReq) GetMemCount() int32 {
	if x != nil {
		return x.MemCount
	}
	return 0
}

func (x *MsgSaveGroupReq) GetGrpName() string {
	if x != nil {
		return x.GrpName
	}
	return ""
}

type MsgSaveGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      SS_COMMON_RESULT `protobuf:"varint,1,opt,name=result,proto3,enum=ss.SS_COMMON_RESULT" json:"result,omitempty"`
	GrpId       int64            `protobuf:"varint,2,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	MemberChged int32            `protobuf:"varint,20,opt,name=member_chged,json=memberChged,proto3" json:"member_chged,omitempty"`
	Members     map[int64]int32  `protobuf:"bytes,21,rep,name=members,proto3" json:"members,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //if member count not match will sync to server
}

func (x *MsgSaveGroupRsp) Reset() {
	*x = MsgSaveGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSaveGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSaveGroupRsp) ProtoMessage() {}

func (x *MsgSaveGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSaveGroupRsp.ProtoReflect.Descriptor instead.
func (*MsgSaveGroupRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{19}
}

func (x *MsgSaveGroupRsp) GetResult() SS_COMMON_RESULT {
	if x != nil {
		return x.Result
	}
	return SS_COMMON_RESULT_SUCCESS
}

func (x *MsgSaveGroupRsp) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgSaveGroupRsp) GetMemberChged() int32 {
	if x != nil {
		return x.MemberChged
	}
	return 0
}

func (x *MsgSaveGroupRsp) GetMembers() map[int64]int32 {
	if x != nil {
		return x.Members
	}
	return nil
}

//Fetch Chat
type MsgFetchChatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         int64          `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GrpId       int64          `protobuf:"varint,2,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	LatestMsgId int64          `protobuf:"varint,3,opt,name=latest_msg_id,json=latestMsgId,proto3" json:"latest_msg_id,omitempty"` //readed msg id
	FetchCount  int32          `protobuf:"varint,4,opt,name=fetch_count,json=fetchCount,proto3" json:"fetch_count,omitempty"`
	FetchType   SS_COMMON_TYPE `protobuf:"varint,5,opt,name=fetch_type,json=fetchType,proto3,enum=ss.SS_COMMON_TYPE" json:"fetch_type,omitempty"`
}

func (x *MsgFetchChatReq) Reset() {
	*x = MsgFetchChatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFetchChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFetchChatReq) ProtoMessage() {}

func (x *MsgFetchChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFetchChatReq.ProtoReflect.Descriptor instead.
func (*MsgFetchChatReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{20}
}

func (x *MsgFetchChatReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgFetchChatReq) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgFetchChatReq) GetLatestMsgId() int64 {
	if x != nil {
		return x.LatestMsgId
	}
	return 0
}

func (x *MsgFetchChatReq) GetFetchCount() int32 {
	if x != nil {
		return x.FetchCount
	}
	return 0
}

func (x *MsgFetchChatReq) GetFetchType() SS_COMMON_TYPE {
	if x != nil {
		return x.FetchType
	}
	return SS_COMMON_TYPE_COMM_TYPE_NORMAL
}

type MsgFetchChatRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     SS_COMMON_RESULT `protobuf:"varint,1,opt,name=result,proto3,enum=ss.SS_COMMON_RESULT" json:"result,omitempty"`
	Uid        int64            `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	GrpId      int64            `protobuf:"varint,3,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	Complete   int32            `protobuf:"varint,4,opt,name=complete,proto3" json:"complete,omitempty"` //1:no more
	FetchCount int32            `protobuf:"varint,5,opt,name=fetch_count,json=fetchCount,proto3" json:"fetch_count,omitempty"`
	ChatList   []*ChatMsg       `protobuf:"bytes,6,rep,name=chat_list,json=chatList,proto3" json:"chat_list,omitempty"`
	FetchType  SS_COMMON_TYPE   `protobuf:"varint,7,opt,name=fetch_type,json=fetchType,proto3,enum=ss.SS_COMMON_TYPE" json:"fetch_type,omitempty"`
}

func (x *MsgFetchChatRsp) Reset() {
	*x = MsgFetchChatRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFetchChatRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFetchChatRsp) ProtoMessage() {}

func (x *MsgFetchChatRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFetchChatRsp.ProtoReflect.Descriptor instead.
func (*MsgFetchChatRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{21}
}

func (x *MsgFetchChatRsp) GetResult() SS_COMMON_RESULT {
	if x != nil {
		return x.Result
	}
	return SS_COMMON_RESULT_SUCCESS
}

func (x *MsgFetchChatRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgFetchChatRsp) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgFetchChatRsp) GetComplete() int32 {
	if x != nil {
		return x.Complete
	}
	return 0
}

func (x *MsgFetchChatRsp) GetFetchCount() int32 {
	if x != nil {
		return x.FetchCount
	}
	return 0
}

func (x *MsgFetchChatRsp) GetChatList() []*ChatMsg {
	if x != nil {
		return x.ChatList
	}
	return nil
}

func (x *MsgFetchChatRsp) GetFetchType() SS_COMMON_TYPE {
	if x != nil {
		return x.FetchType
	}
	return SS_COMMON_TYPE_COMM_TYPE_NORMAL
}

type MsgSyncChatList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64          `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GrpId    int64          `protobuf:"varint,2,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	Count    int32          `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	ChatList []*ChatMsg     `protobuf:"bytes,4,rep,name=chat_list,json=chatList,proto3" json:"chat_list,omitempty"`
	SyncType SS_COMMON_TYPE `protobuf:"varint,7,opt,name=sync_type,json=syncType,proto3,enum=ss.SS_COMMON_TYPE" json:"sync_type,omitempty"`
}

func (x *MsgSyncChatList) Reset() {
	*x = MsgSyncChatList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSyncChatList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSyncChatList) ProtoMessage() {}

func (x *MsgSyncChatList) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSyncChatList.ProtoReflect.Descriptor instead.
func (*MsgSyncChatList) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{22}
}

func (x *MsgSyncChatList) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgSyncChatList) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgSyncChatList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MsgSyncChatList) GetChatList() []*ChatMsg {
	if x != nil {
		return x.ChatList
	}
	return nil
}

func (x *MsgSyncChatList) GetSyncType() SS_COMMON_TYPE {
	if x != nil {
		return x.SyncType
	}
	return SS_COMMON_TYPE_COMM_TYPE_NORMAL
}

//Exit Group
type MsgExitGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GrpId    int64  `protobuf:"varint,2,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	GrpName  string `protobuf:"bytes,3,opt,name=grp_name,json=grpName,proto3" json:"grp_name,omitempty"`
	DelGroup int32  `protobuf:"varint,4,opt,name=del_group,json=delGroup,proto3" json:"del_group,omitempty"`
}

func (x *MsgExitGroupReq) Reset() {
	*x = MsgExitGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgExitGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgExitGroupReq) ProtoMessage() {}

func (x *MsgExitGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgExitGroupReq.ProtoReflect.Descriptor instead.
func (*MsgExitGroupReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{23}
}

func (x *MsgExitGroupReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgExitGroupReq) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgExitGroupReq) GetGrpName() string {
	if x != nil {
		return x.GrpName
	}
	return ""
}

func (x *MsgExitGroupReq) GetDelGroup() int32 {
	if x != nil {
		return x.DelGroup
	}
	return 0
}

type MsgExitGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   SS_COMMON_RESULT `protobuf:"varint,1,opt,name=result,proto3,enum=ss.SS_COMMON_RESULT" json:"result,omitempty"`
	Uid      int64            `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	GrpId    int64            `protobuf:"varint,3,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	GrpName  string           `protobuf:"bytes,4,opt,name=grp_name,json=grpName,proto3" json:"grp_name,omitempty"`
	DelGroup int32            `protobuf:"varint,5,opt,name=del_group,json=delGroup,proto3" json:"del_group,omitempty"`
	ByKick   int32            `protobuf:"varint,20,opt,name=by_kick,json=byKick,proto3" json:"by_kick,omitempty"`
}

func (x *MsgExitGroupRsp) Reset() {
	*x = MsgExitGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgExitGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgExitGroupRsp) ProtoMessage() {}

func (x *MsgExitGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgExitGroupRsp.ProtoReflect.Descriptor instead.
func (*MsgExitGroupRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{24}
}

func (x *MsgExitGroupRsp) GetResult() SS_COMMON_RESULT {
	if x != nil {
		return x.Result
	}
	return SS_COMMON_RESULT_SUCCESS
}

func (x *MsgExitGroupRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgExitGroupRsp) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgExitGroupRsp) GetGrpName() string {
	if x != nil {
		return x.GrpName
	}
	return ""
}

func (x *MsgExitGroupRsp) GetDelGroup() int32 {
	if x != nil {
		return x.DelGroup
	}
	return 0
}

func (x *MsgExitGroupRsp) GetByKick() int32 {
	if x != nil {
		return x.ByKick
	}
	return 0
}

//Kickout Group
type MsgKickGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GrpId   int64  `protobuf:"varint,2,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	GrpName string `protobuf:"bytes,3,opt,name=grp_name,json=grpName,proto3" json:"grp_name,omitempty"`
	KickUid int64  `protobuf:"varint,4,opt,name=kick_uid,json=kickUid,proto3" json:"kick_uid,omitempty"`
}

func (x *MsgKickGroupReq) Reset() {
	*x = MsgKickGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgKickGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgKickGroupReq) ProtoMessage() {}

func (x *MsgKickGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgKickGroupReq.ProtoReflect.Descriptor instead.
func (*MsgKickGroupReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{25}
}

func (x *MsgKickGroupReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgKickGroupReq) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgKickGroupReq) GetGrpName() string {
	if x != nil {
		return x.GrpName
	}
	return ""
}

func (x *MsgKickGroupReq) GetKickUid() int64 {
	if x != nil {
		return x.KickUid
	}
	return 0
}

type MsgKickGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  SS_COMMON_RESULT `protobuf:"varint,1,opt,name=result,proto3,enum=ss.SS_COMMON_RESULT" json:"result,omitempty"`
	Uid     int64            `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	GrpId   int64            `protobuf:"varint,3,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	GrpName string           `protobuf:"bytes,4,opt,name=grp_name,json=grpName,proto3" json:"grp_name,omitempty"`
	KickUid int64            `protobuf:"varint,5,opt,name=kick_uid,json=kickUid,proto3" json:"kick_uid,omitempty"`
}

func (x *MsgKickGroupRsp) Reset() {
	*x = MsgKickGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgKickGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgKickGroupRsp) ProtoMessage() {}

func (x *MsgKickGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgKickGroupRsp.ProtoReflect.Descriptor instead.
func (*MsgKickGroupRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{26}
}

func (x *MsgKickGroupRsp) GetResult() SS_COMMON_RESULT {
	if x != nil {
		return x.Result
	}
	return SS_COMMON_RESULT_SUCCESS
}

func (x *MsgKickGroupRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgKickGroupRsp) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgKickGroupRsp) GetGrpName() string {
	if x != nil {
		return x.GrpName
	}
	return ""
}

func (x *MsgKickGroupRsp) GetKickUid() int64 {
	if x != nil {
		return x.KickUid
	}
	return 0
}

//Fetch OFFLINE_INFO
type MsgFetchOfflineInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FetchCount int32 `protobuf:"varint,2,opt,name=fetch_count,json=fetchCount,proto3" json:"fetch_count,omitempty"`
}

func (x *MsgFetchOfflineInfoReq) Reset() {
	*x = MsgFetchOfflineInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFetchOfflineInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFetchOfflineInfoReq) ProtoMessage() {}

func (x *MsgFetchOfflineInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFetchOfflineInfoReq.ProtoReflect.Descriptor instead.
func (*MsgFetchOfflineInfoReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{27}
}

func (x *MsgFetchOfflineInfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgFetchOfflineInfoReq) GetFetchCount() int32 {
	if x != nil {
		return x.FetchCount
	}
	return 0
}

type MsgFetchOfflineInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     SS_COMMON_RESULT `protobuf:"varint,1,opt,name=result,proto3,enum=ss.SS_COMMON_RESULT" json:"result,omitempty"`
	Uid        int64            `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Complete   int32            `protobuf:"varint,3,opt,name=complete,proto3" json:"complete,omitempty"` //1:no more
	FetchCount int32            `protobuf:"varint,4,opt,name=fetch_count,json=fetchCount,proto3" json:"fetch_count,omitempty"`
	InfoList   []string         `protobuf:"bytes,5,rep,name=info_list,json=infoList,proto3" json:"info_list,omitempty"`
}

func (x *MsgFetchOfflineInfoRsp) Reset() {
	*x = MsgFetchOfflineInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFetchOfflineInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFetchOfflineInfoRsp) ProtoMessage() {}

func (x *MsgFetchOfflineInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFetchOfflineInfoRsp.ProtoReflect.Descriptor instead.
func (*MsgFetchOfflineInfoRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{28}
}

func (x *MsgFetchOfflineInfoRsp) GetResult() SS_COMMON_RESULT {
	if x != nil {
		return x.Result
	}
	return SS_COMMON_RESULT_SUCCESS
}

func (x *MsgFetchOfflineInfoRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgFetchOfflineInfoRsp) GetComplete() int32 {
	if x != nil {
		return x.Complete
	}
	return 0
}

func (x *MsgFetchOfflineInfoRsp) GetFetchCount() int32 {
	if x != nil {
		return x.FetchCount
	}
	return 0
}

func (x *MsgFetchOfflineInfoRsp) GetInfoList() []string {
	if x != nil {
		return x.InfoList
	}
	return nil
}

//Profile
type MsgFetchUserProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        int64   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TargetList []int64 `protobuf:"varint,2,rep,packed,name=target_list,json=targetList,proto3" json:"target_list,omitempty"`
}

func (x *MsgFetchUserProfileReq) Reset() {
	*x = MsgFetchUserProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFetchUserProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFetchUserProfileReq) ProtoMessage() {}

func (x *MsgFetchUserProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFetchUserProfileReq.ProtoReflect.Descriptor instead.
func (*MsgFetchUserProfileReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{29}
}

func (x *MsgFetchUserProfileReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgFetchUserProfileReq) GetTargetList() []int64 {
	if x != nil {
		return x.TargetList
	}
	return nil
}

type MsgFetchUserProfileRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   SS_COMMON_RESULT       `protobuf:"varint,1,opt,name=result,proto3,enum=ss.SS_COMMON_RESULT" json:"result,omitempty"`
	Uid      int64                  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Profiles map[int64]*UserProfile `protobuf:"bytes,3,rep,name=profiles,proto3" json:"profiles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MsgFetchUserProfileRsp) Reset() {
	*x = MsgFetchUserProfileRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFetchUserProfileRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFetchUserProfileRsp) ProtoMessage() {}

func (x *MsgFetchUserProfileRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFetchUserProfileRsp.ProtoReflect.Descriptor instead.
func (*MsgFetchUserProfileRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{30}
}

func (x *MsgFetchUserProfileRsp) GetResult() SS_COMMON_RESULT {
	if x != nil {
		return x.Result
	}
	return SS_COMMON_RESULT_SUCCESS
}

func (x *MsgFetchUserProfileRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgFetchUserProfileRsp) GetProfiles() map[int64]*UserProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type MsgSaveUserProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int64        `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Profile *UserProfile `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *MsgSaveUserProfileReq) Reset() {
	*x = MsgSaveUserProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSaveUserProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSaveUserProfileReq) ProtoMessage() {}

func (x *MsgSaveUserProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSaveUserProfileReq.ProtoReflect.Descriptor instead.
func (*MsgSaveUserProfileReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{31}
}

func (x *MsgSaveUserProfileReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgSaveUserProfileReq) GetProfile() *UserProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

//Group List Req only for visible group
type MsgGroupGroudReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	StartIndex int32 `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	Count      int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MsgGroupGroudReq) Reset() {
	*x = MsgGroupGroudReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGroupGroudReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGroupGroudReq) ProtoMessage() {}

func (x *MsgGroupGroudReq) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgGroupGroudReq.ProtoReflect.Descriptor instead.
func (*MsgGroupGroudReq) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{32}
}

func (x *MsgGroupGroudReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgGroupGroudReq) GetStartIndex() int32 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *MsgGroupGroudReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MsgGroupGroudRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Count    int32             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	ItemList []*GroupGroudItem `protobuf:"bytes,3,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *MsgGroupGroudRsp) Reset() {
	*x = MsgGroupGroudRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgGroupGroudRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGroupGroudRsp) ProtoMessage() {}

func (x *MsgGroupGroudRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgGroupGroudRsp.ProtoReflect.Descriptor instead.
func (*MsgGroupGroudRsp) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{33}
}

func (x *MsgGroupGroudRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgGroupGroudRsp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MsgGroupGroudRsp) GetItemList() []*GroupGroudItem {
	if x != nil {
		return x.ItemList
	}
	return nil
}

var File_ss_proto protoreflect.FileDescriptor

var file_ss_proto_rawDesc = []byte{
	0x0a, 0x08, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x73, 0x73, 0x1a, 0x0b,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x17, 0x0a, 0x05, 0x53, 0x53, 0x4d, 0x73, 0x67, 0x12, 0x30,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x73, 0x2e, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73,
	0x67, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52,
	0x0c, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a,
	0x08, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x48,
	0x00, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x73, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x07,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x73, 0x2e,
	0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x72, 0x73, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x73, 0x2e,
	0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x73,
	0x2e, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x0a, 0x6c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x73, 0x70,
	0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x73, 0x70, 0x12, 0x28, 0x0a,
	0x07, 0x72, 0x65, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x67, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x5f, 0x72,
	0x73, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x67, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x52, 0x73,
	0x70, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73,
	0x2e, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x70, 0x52, 0x65, 0x71,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x73, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x70, 0x52, 0x73,
	0x70, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x69,
	0x73, 0x70, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x69, 0x73, 0x70, 0x12, 0x3e, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x73, 0x70,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x47, 0x0a,
	0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x2e, 0x4d,
	0x73, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x48, 0x00, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x44, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x0f,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00,
	0x52, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x41, 0x0a, 0x0f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72,
	0x73, 0x70, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73,
	0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x70, 0x52, 0x73,
	0x70, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e, 0x4d,
	0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00,
	0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x41,
	0x0a, 0x0f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x74, 0x47, 0x72, 0x70, 0x52, 0x65, 0x71,
	0x48, 0x00, 0x52, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x41, 0x0a, 0x0f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x72, 0x73, 0x70, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x2e,
	0x4d, 0x73, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x74, 0x47, 0x72, 0x70,
	0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x73, 0x2e, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x72, 0x73, 0x70, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e, 0x4d,
	0x73, 0x67, 0x4c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x48, 0x00,
	0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x38,
	0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e,
	0x4d, 0x73, 0x67, 0x53, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x3b, 0x0a, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x73,
	0x70, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67,
	0x53, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0e,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x0e, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73,
	0x2e, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x3b, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72,
	0x73, 0x70, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73,
	0x67, 0x45, 0x78, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52,
	0x0c, 0x65, 0x78, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x3b, 0x0a,
	0x0e, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x4b, 0x69,
	0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0c, 0x6b, 0x69,
	0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x0e, 0x6b, 0x69,
	0x63, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x4b, 0x69, 0x63, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x16, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65,
	0x71, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x51, 0x0a, 0x16, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x72, 0x73, 0x70, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x73, 0x2e,
	0x4d, 0x73, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x3e, 0x0a,
	0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0d,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a,
	0x0f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53,
	0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a,
	0x16, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x51, 0x0a, 0x16, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x13,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x61, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x12, 0x63, 0x68, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x12, 0x63, 0x68,
	0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x72, 0x73, 0x70,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x43,
	0x68, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x52, 0x73, 0x70, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x68, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x52, 0x73,
	0x70, 0x12, 0x40, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x73,
	0x2e, 0x4d, 0x73, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x71, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x64,
	0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x73, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x21, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x22, 0x3b, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x8e,
	0x01, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x13,
	0x0a, 0x05, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x73,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xc2, 0x01, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x12,
	0x2a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x73, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x54, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x22, 0x7b, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x62, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x4f,
	0x47, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x8b, 0x01, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x78, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x22, 0x5c, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x67, 0x52, 0x73, 0x70,
	0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x73, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x59, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x70, 0x50, 0x61, 0x73, 0x73, 0x22, 0xba, 0x01, 0x0a,
	0x0f, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x70, 0x52, 0x73, 0x70,
	0x12, 0x29, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x73, 0x73, 0x2e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x67, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67,
	0x72, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x73, 0x22, 0x48, 0x0a, 0x13, 0x4d, 0x73, 0x67,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x70, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x47, 0x72, 0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9b,
	0x01, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x47, 0x72, 0x70, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x73, 0x2e, 0x4d,
	0x73, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xee, 0x01, 0x0a,
	0x0f, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x73, 0x73, 0x2e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x67, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x67, 0x72, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x6d, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x63, 0x63, 0x6f, 0x75, 0x70, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6f, 0x63, 0x63, 0x6f, 0x75, 0x70, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x69,
	0x6e, 0x74, 0x5f, 0x76, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x56,
	0x12, 0x13, 0x0a, 0x05, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x74, 0x72, 0x56, 0x12, 0x26, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x22, 0xcf, 0x02,
	0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73,
	0x70, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x73, 0x73, 0x2e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x2e, 0x53, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x52, 0x0a, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x70, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x67, 0x72, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x73,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x67, 0x72, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x63, 0x63, 0x6f, 0x75, 0x70, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x63, 0x63, 0x6f, 0x75, 0x70, 0x79, 0x12, 0x13, 0x0a,
	0x05, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x6e,
	0x74, 0x56, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x74, 0x72, 0x56, 0x12, 0x26, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x22,
	0xf8, 0x01, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x53, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x2e,
	0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x73, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x6c, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x6c, 0x6f,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x0f, 0x4d,
	0x73, 0x67, 0x53, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x2c,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x73, 0x73, 0x2e, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x67, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72,
	0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x68,
	0x67, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x68, 0x67, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67,
	0x53, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2,
	0x01, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x73, 0x2e, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x2e, 0x53, 0x53, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x70, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x73, 0x2e, 0x53,
	0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x4d, 0x73, 0x67,
	0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x67, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x67, 0x72, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x73, 0x2e, 0x53, 0x53,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x73, 0x79,
	0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x72, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x69,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67,
	0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x70,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xb9, 0x01, 0x0a, 0x0f, 0x4d,
	0x73, 0x67, 0x45, 0x78, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x2c,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x73, 0x73, 0x2e, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x67, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x67, 0x72, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x79, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x62, 0x79, 0x4b, 0x69, 0x63, 0x6b, 0x22, 0x70, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x4b, 0x69, 0x63,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67,
	0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x70,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6b, 0x69, 0x63, 0x6b, 0x55, 0x69, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x0f, 0x4d, 0x73, 0x67,
	0x4b, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73,
	0x73, 0x2e, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x67, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72,
	0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6b, 0x69, 0x63, 0x6b, 0x55, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x16, 0x4d, 0x73, 0x67,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x4d, 0x73, 0x67, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73,
	0x70, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x2e, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x16, 0x4d,
	0x73, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x16, 0x4d, 0x73, 0x67,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x2e, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x73,
	0x70, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54, 0x0a, 0x15, 0x4d, 0x73, 0x67, 0x53, 0x61,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x5b, 0x0a,
	0x10, 0x4d, 0x73, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x10, 0x4d, 0x73,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x64, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x73, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x2a, 0x80, 0x08, 0x0a, 0x0d, 0x53, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x45, 0x41,
	0x52, 0x54, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x52, 0x53, 0x50, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4c,
	0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4c,
	0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47, 0x5f,
	0x52, 0x53, 0x50, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x10,
	0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x50,
	0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x11, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x10, 0x13, 0x12, 0x19,
	0x0a, 0x15, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x45, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52,
	0x53, 0x50, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0x17, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x55, 0x44, 0x49,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x18, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0x19, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x1a, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x1b, 0x12, 0x12, 0x0a, 0x0e, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x1c, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x52, 0x53, 0x50, 0x10, 0x1e, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x41, 0x56,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x20, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10,
	0x21, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x52, 0x53, 0x50, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x23, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x49,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x24, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x10,
	0x25, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0x26, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x27, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x45, 0x54,
	0x43, 0x48, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0x28, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x4f,
	0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x53, 0x50, 0x10,
	0x29, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x2b, 0x12, 0x1a, 0x0a, 0x16, 0x46,
	0x45, 0x54, 0x43, 0x48, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x2c, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x53,
	0x50, 0x10, 0x2d, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x2e, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x48, 0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0x2f, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x47, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x30, 0x12, 0x14,
	0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x10, 0x31, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x32, 0x2a, 0x67, 0x0a, 0x0e, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x54, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x4f,
	0x4e, 0x10, 0x04, 0x2a, 0xcb, 0x01, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47,
	0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f,
	0x47, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x54,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4f,
	0x47, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47,
	0x4f, 0x55, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f,
	0x42, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47,
	0x4f, 0x55, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x10,
	0x06, 0x2a, 0x3f, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x47, 0x5f, 0x44, 0x55, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x5f, 0x44, 0x42, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x02, 0x2a, 0x8b, 0x01, 0x0a, 0x13, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x54,
	0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x44, 0x42, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x04,
	0x2a, 0x61, 0x0a, 0x11, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x47, 0x52,
	0x50, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x47, 0x52, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x47,
	0x52, 0x50, 0x5f, 0x43, 0x48, 0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ss_proto_rawDescOnce sync.Once
	file_ss_proto_rawDescData = file_ss_proto_rawDesc
)

func file_ss_proto_rawDescGZIP() []byte {
	file_ss_proto_rawDescOnce.Do(func() {
		file_ss_proto_rawDescData = protoimpl.X.CompressGZIP(file_ss_proto_rawDescData)
	})
	return file_ss_proto_rawDescData
}

var file_ss_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_ss_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_ss_proto_goTypes = []interface{}{
	(SS_PROTO_TYPE)(0),             // 0: ss.SS_PROTO_TYPE
	(USER_LOGIN_RET)(0),            // 1: ss.USER_LOGIN_RET
	(USER_LOGOUT_REASON)(0),        // 2: ss.USER_LOGOUT_REASON
	(REG_RESULT)(0),                // 3: ss.REG_RESULT
	(CREATE_GROUP_RESULT)(0),       // 4: ss.CREATE_GROUP_RESULT
	(LOAD_GROUP_REASON)(0),         // 5: ss.LOAD_GROUP_REASON
	(*SSMsg)(nil),                  // 6: ss.SSMsg
	(*MsgHeartBeatReq)(nil),        // 7: ss.MsgHeartBeatReq
	(*MsgPingReq)(nil),             // 8: ss.MsgPingReq
	(*MsgPingRsp)(nil),             // 9: ss.MsgPingRsp
	(*MsgLoginReq)(nil),            // 10: ss.MsgLoginReq
	(*MsgLoginRsp)(nil),            // 11: ss.MsgLoginRsp
	(*MsgLogoutReq)(nil),           // 12: ss.MsgLogoutReq
	(*MsgLogoutRsp)(nil),           // 13: ss.MsgLogoutRsp
	(*MsgRegReq)(nil),              // 14: ss.MsgRegReq
	(*MsgRegRsp)(nil),              // 15: ss.MsgRegRsp
	(*MsgCreateGrpReq)(nil),        // 16: ss.MsgCreateGrpReq
	(*MsgCreateGrpRsp)(nil),        // 17: ss.MsgCreateGrpRsp
	(*MsgFetchApplyGrpReq)(nil),    // 18: ss.MsgFetchApplyGrpReq
	(*MsgFetchApplyGrpRsp)(nil),    // 19: ss.MsgFetchApplyGrpRsp
	(*MsgFetchAuditGrpReq)(nil),    // 20: ss.MsgFetchAuditGrpReq
	(*MsgFetchAuditGrpRsp)(nil),    // 21: ss.MsgFetchAuditGrpRsp
	(*MsgLoadGroupReq)(nil),        // 22: ss.MsgLoadGroupReq
	(*MsgLoadGroupRsp)(nil),        // 23: ss.MsgLoadGroupRsp
	(*MsgSaveGroupReq)(nil),        // 24: ss.MsgSaveGroupReq
	(*MsgSaveGroupRsp)(nil),        // 25: ss.MsgSaveGroupRsp
	(*MsgFetchChatReq)(nil),        // 26: ss.MsgFetchChatReq
	(*MsgFetchChatRsp)(nil),        // 27: ss.MsgFetchChatRsp
	(*MsgSyncChatList)(nil),        // 28: ss.MsgSyncChatList
	(*MsgExitGroupReq)(nil),        // 29: ss.MsgExitGroupReq
	(*MsgExitGroupRsp)(nil),        // 30: ss.MsgExitGroupRsp
	(*MsgKickGroupReq)(nil),        // 31: ss.MsgKickGroupReq
	(*MsgKickGroupRsp)(nil),        // 32: ss.MsgKickGroupRsp
	(*MsgFetchOfflineInfoReq)(nil), // 33: ss.MsgFetchOfflineInfoReq
	(*MsgFetchOfflineInfoRsp)(nil), // 34: ss.MsgFetchOfflineInfoRsp
	(*MsgFetchUserProfileReq)(nil), // 35: ss.MsgFetchUserProfileReq
	(*MsgFetchUserProfileRsp)(nil), // 36: ss.MsgFetchUserProfileRsp
	(*MsgSaveUserProfileReq)(nil),  // 37: ss.MsgSaveUserProfileReq
	(*MsgGroupGroudReq)(nil),       // 38: ss.MsgGroupGroudReq
	(*MsgGroupGroudRsp)(nil),       // 39: ss.MsgGroupGroudRsp
	nil,                            // 40: ss.MsgSaveGroupRsp.MembersEntry
	nil,                            // 41: ss.MsgFetchUserProfileRsp.ProfilesEntry
	(*MsgDisp)(nil),                // 42: ss.MsgDisp
	(*MsgApplyGroupReq)(nil),       // 43: ss.MsgApplyGroupReq
	(*MsgApplyGroupRsp)(nil),       // 44: ss.MsgApplyGroupRsp
	(*MsgApplyGroupNotify)(nil),    // 45: ss.MsgApplyGroupNotify
	(*MsgApplyGroupAudit)(nil),     // 46: ss.MsgApplyGroupAudit
	(*MsgCommonNotify)(nil),        // 47: ss.MsgCommonNotify
	(*MsgEnterGroupReq)(nil),       // 48: ss.MsgEnterGroupReq
	(*MsgEnterGroupRsp)(nil),       // 49: ss.MsgEnterGroupRsp
	(*MsgSendChatReq)(nil),         // 50: ss.MsgSendChatReq
	(*MsgSendChatRsp)(nil),         // 51: ss.MsgSendChatRsp
	(*MsgQueryGroupReq)(nil),       // 52: ss.MsgQueryGroupReq
	(*MsgSyncGroupInfo)(nil),       // 53: ss.MsgSyncGroupInfo
	(*MsgChgGroupAttrReq)(nil),     // 54: ss.MsgChgGroupAttrReq
	(*MsgChgGroupAttrRsp)(nil),     // 55: ss.MsgChgGroupAttrRsp
	(*UserInfo)(nil),               // 56: ss.UserInfo
	(*ChatMsg)(nil),                // 57: ss.ChatMsg
	(SS_COMMON_RESULT)(0),          // 58: ss.SS_COMMON_RESULT
	(*GroupInfo)(nil),              // 59: ss.GroupInfo
	(SS_COMMON_REASON)(0),          // 60: ss.SS_COMMON_REASON
	(*GroupBlobData)(nil),          // 61: ss.GroupBlobData
	(SS_COMMON_TYPE)(0),            // 62: ss.SS_COMMON_TYPE
	(*UserProfile)(nil),            // 63: ss.UserProfile
	(*GroupGroudItem)(nil),         // 64: ss.GroupGroudItem
}
var file_ss_proto_depIdxs = []int32{
	0,  // 0: ss.SSMsg.proto_type:type_name -> ss.SS_PROTO_TYPE
	7,  // 1: ss.SSMsg.heart_beat_req:type_name -> ss.MsgHeartBeatReq
	8,  // 2: ss.SSMsg.ping_req:type_name -> ss.MsgPingReq
	9,  // 3: ss.SSMsg.ping_rsp:type_name -> ss.MsgPingRsp
	10, // 4: ss.SSMsg.login_req:type_name -> ss.MsgLoginReq
	11, // 5: ss.SSMsg.login_rsp:type_name -> ss.MsgLoginRsp
	12, // 6: ss.SSMsg.logout_req:type_name -> ss.MsgLogoutReq
	13, // 7: ss.SSMsg.logout_rsp:type_name -> ss.MsgLogoutRsp
	14, // 8: ss.SSMsg.reg_req:type_name -> ss.MsgRegReq
	15, // 9: ss.SSMsg.reg_rsp:type_name -> ss.MsgRegRsp
	16, // 10: ss.SSMsg.create_group_req:type_name -> ss.MsgCreateGrpReq
	17, // 11: ss.SSMsg.create_group_rsp:type_name -> ss.MsgCreateGrpRsp
	42, // 12: ss.SSMsg.msg_disp:type_name -> ss.MsgDisp
	43, // 13: ss.SSMsg.apply_group_req:type_name -> ss.MsgApplyGroupReq
	44, // 14: ss.SSMsg.apply_group_rsp:type_name -> ss.MsgApplyGroupRsp
	45, // 15: ss.SSMsg.apply_group_notify:type_name -> ss.MsgApplyGroupNotify
	46, // 16: ss.SSMsg.apply_group_audit:type_name -> ss.MsgApplyGroupAudit
	18, // 17: ss.SSMsg.fetch_apply_req:type_name -> ss.MsgFetchApplyGrpReq
	19, // 18: ss.SSMsg.fetch_apply_rsp:type_name -> ss.MsgFetchApplyGrpRsp
	47, // 19: ss.SSMsg.common_notify:type_name -> ss.MsgCommonNotify
	20, // 20: ss.SSMsg.fetch_audit_req:type_name -> ss.MsgFetchAuditGrpReq
	21, // 21: ss.SSMsg.fetch_audit_rsp:type_name -> ss.MsgFetchAuditGrpRsp
	48, // 22: ss.SSMsg.enter_group_req:type_name -> ss.MsgEnterGroupReq
	49, // 23: ss.SSMsg.enter_group_rsp:type_name -> ss.MsgEnterGroupRsp
	22, // 24: ss.SSMsg.load_group_req:type_name -> ss.MsgLoadGroupReq
	23, // 25: ss.SSMsg.load_group_rsp:type_name -> ss.MsgLoadGroupRsp
	50, // 26: ss.SSMsg.send_chat_req:type_name -> ss.MsgSendChatReq
	51, // 27: ss.SSMsg.send_chat_rsp:type_name -> ss.MsgSendChatRsp
	24, // 28: ss.SSMsg.save_group_req:type_name -> ss.MsgSaveGroupReq
	25, // 29: ss.SSMsg.save_group_rsp:type_name -> ss.MsgSaveGroupRsp
	26, // 30: ss.SSMsg.fetch_chat_req:type_name -> ss.MsgFetchChatReq
	27, // 31: ss.SSMsg.fetch_chat_rsp:type_name -> ss.MsgFetchChatRsp
	28, // 32: ss.SSMsg.sync_chat_list:type_name -> ss.MsgSyncChatList
	29, // 33: ss.SSMsg.exit_group_req:type_name -> ss.MsgExitGroupReq
	30, // 34: ss.SSMsg.exit_group_rsp:type_name -> ss.MsgExitGroupRsp
	31, // 35: ss.SSMsg.kick_group_req:type_name -> ss.MsgKickGroupReq
	32, // 36: ss.SSMsg.kick_group_rsp:type_name -> ss.MsgKickGroupRsp
	33, // 37: ss.SSMsg.fetch_offline_info_req:type_name -> ss.MsgFetchOfflineInfoReq
	34, // 38: ss.SSMsg.fetch_offline_info_rsp:type_name -> ss.MsgFetchOfflineInfoRsp
	52, // 39: ss.SSMsg.query_group_req:type_name -> ss.MsgQueryGroupReq
	53, // 40: ss.SSMsg.sync_group_info:type_name -> ss.MsgSyncGroupInfo
	35, // 41: ss.SSMsg.fetch_user_profile_req:type_name -> ss.MsgFetchUserProfileReq
	36, // 42: ss.SSMsg.fetch_user_profile_rsp:type_name -> ss.MsgFetchUserProfileRsp
	37, // 43: ss.SSMsg.save_user_profile_req:type_name -> ss.MsgSaveUserProfileReq
	54, // 44: ss.SSMsg.chg_group_attr_req:type_name -> ss.MsgChgGroupAttrReq
	55, // 45: ss.SSMsg.chg_group_attr_rsp:type_name -> ss.MsgChgGroupAttrRsp
	38, // 46: ss.SSMsg.group_ground_req:type_name -> ss.MsgGroupGroudReq
	39, // 47: ss.SSMsg.group_ground_rsp:type_name -> ss.MsgGroupGroudRsp
	1,  // 48: ss.MsgLoginRsp.result:type_name -> ss.USER_LOGIN_RET
	56, // 49: ss.MsgLoginRsp.user_info:type_name -> ss.UserInfo
	2,  // 50: ss.MsgLogoutReq.reason:type_name -> ss.USER_LOGOUT_REASON
	56, // 51: ss.MsgLogoutReq.user_info:type_name -> ss.UserInfo
	2,  // 52: ss.MsgLogoutRsp.reason:type_name -> ss.USER_LOGOUT_REASON
	3,  // 53: ss.MsgRegRsp.result:type_name -> ss.REG_RESULT
	4,  // 54: ss.MsgCreateGrpRsp.ret:type_name -> ss.CREATE_GROUP_RESULT
	45, // 55: ss.MsgFetchApplyGrpRsp.notify_list:type_name -> ss.MsgApplyGroupNotify
	46, // 56: ss.MsgFetchAuditGrpRsp.audit_list:type_name -> ss.MsgApplyGroupAudit
	5,  // 57: ss.MsgLoadGroupReq.reason:type_name -> ss.LOAD_GROUP_REASON
	57, // 58: ss.MsgLoadGroupReq.chat_msg:type_name -> ss.ChatMsg
	5,  // 59: ss.MsgLoadGroupRsp.reason:type_name -> ss.LOAD_GROUP_REASON
	58, // 60: ss.MsgLoadGroupRsp.load_result:type_name -> ss.SS_COMMON_RESULT
	59, // 61: ss.MsgLoadGroupRsp.grp_info:type_name -> ss.GroupInfo
	57, // 62: ss.MsgLoadGroupRsp.chat_msg:type_name -> ss.ChatMsg
	60, // 63: ss.MsgSaveGroupReq.reason:type_name -> ss.SS_COMMON_REASON
	61, // 64: ss.MsgSaveGroupReq.blob_info:type_name -> ss.GroupBlobData
	58, // 65: ss.MsgSaveGroupRsp.result:type_name -> ss.SS_COMMON_RESULT
	40, // 66: ss.MsgSaveGroupRsp.members:type_name -> ss.MsgSaveGroupRsp.MembersEntry
	62, // 67: ss.MsgFetchChatReq.fetch_type:type_name -> ss.SS_COMMON_TYPE
	58, // 68: ss.MsgFetchChatRsp.result:type_name -> ss.SS_COMMON_RESULT
	57, // 69: ss.MsgFetchChatRsp.chat_list:type_name -> ss.ChatMsg
	62, // 70: ss.MsgFetchChatRsp.fetch_type:type_name -> ss.SS_COMMON_TYPE
	57, // 71: ss.MsgSyncChatList.chat_list:type_name -> ss.ChatMsg
	62, // 72: ss.MsgSyncChatList.sync_type:type_name -> ss.SS_COMMON_TYPE
	58, // 73: ss.MsgExitGroupRsp.result:type_name -> ss.SS_COMMON_RESULT
	58, // 74: ss.MsgKickGroupRsp.result:type_name -> ss.SS_COMMON_RESULT
	58, // 75: ss.MsgFetchOfflineInfoRsp.result:type_name -> ss.SS_COMMON_RESULT
	58, // 76: ss.MsgFetchUserProfileRsp.result:type_name -> ss.SS_COMMON_RESULT
	41, // 77: ss.MsgFetchUserProfileRsp.profiles:type_name -> ss.MsgFetchUserProfileRsp.ProfilesEntry
	63, // 78: ss.MsgSaveUserProfileReq.profile:type_name -> ss.UserProfile
	64, // 79: ss.MsgGroupGroudRsp.item_list:type_name -> ss.GroupGroudItem
	63, // 80: ss.MsgFetchUserProfileRsp.ProfilesEntry.value:type_name -> ss.UserProfile
	81, // [81:81] is the sub-list for method output_type
	81, // [81:81] is the sub-list for method input_type
	81, // [81:81] is the sub-list for extension type_name
	81, // [81:81] is the sub-list for extension extendee
	0,  // [0:81] is the sub-list for field type_name
}

func init() { file_ss_proto_init() }
func file_ss_proto_init() {
	if File_ss_proto != nil {
		return
	}
	file_basic_proto_init()
	file_chat_proto_init()
	file_disp_proto_init()
	file_user_info_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ss_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHeartBeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPingRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgLoginRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgLogoutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgLogoutRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRegReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRegRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCreateGrpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCreateGrpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFetchApplyGrpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFetchApplyGrpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFetchAuditGrpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFetchAuditGrpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgLoadGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgLoadGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSaveGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSaveGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFetchChatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFetchChatRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSyncChatList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgExitGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgExitGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgKickGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgKickGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFetchOfflineInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFetchOfflineInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFetchUserProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFetchUserProfileRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSaveUserProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGroupGroudReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ss_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgGroupGroudRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ss_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SSMsg_HeartBeatReq)(nil),
		(*SSMsg_PingReq)(nil),
		(*SSMsg_PingRsp)(nil),
		(*SSMsg_LoginReq)(nil),
		(*SSMsg_LoginRsp)(nil),
		(*SSMsg_LogoutReq)(nil),
		(*SSMsg_LogoutRsp)(nil),
		(*SSMsg_RegReq)(nil),
		(*SSMsg_RegRsp)(nil),
		(*SSMsg_CreateGroupReq)(nil),
		(*SSMsg_CreateGroupRsp)(nil),
		(*SSMsg_MsgDisp)(nil),
		(*SSMsg_ApplyGroupReq)(nil),
		(*SSMsg_ApplyGroupRsp)(nil),
		(*SSMsg_ApplyGroupNotify)(nil),
		(*SSMsg_ApplyGroupAudit)(nil),
		(*SSMsg_FetchApplyReq)(nil),
		(*SSMsg_FetchApplyRsp)(nil),
		(*SSMsg_CommonNotify)(nil),
		(*SSMsg_FetchAuditReq)(nil),
		(*SSMsg_FetchAuditRsp)(nil),
		(*SSMsg_EnterGroupReq)(nil),
		(*SSMsg_EnterGroupRsp)(nil),
		(*SSMsg_LoadGroupReq)(nil),
		(*SSMsg_LoadGroupRsp)(nil),
		(*SSMsg_SendChatReq)(nil),
		(*SSMsg_SendChatRsp)(nil),
		(*SSMsg_SaveGroupReq)(nil),
		(*SSMsg_SaveGroupRsp)(nil),
		(*SSMsg_FetchChatReq)(nil),
		(*SSMsg_FetchChatRsp)(nil),
		(*SSMsg_SyncChatList)(nil),
		(*SSMsg_ExitGroupReq)(nil),
		(*SSMsg_ExitGroupRsp)(nil),
		(*SSMsg_KickGroupReq)(nil),
		(*SSMsg_KickGroupRsp)(nil),
		(*SSMsg_FetchOfflineInfoReq)(nil),
		(*SSMsg_FetchOfflineInfoRsp)(nil),
		(*SSMsg_QueryGroupReq)(nil),
		(*SSMsg_SyncGroupInfo)(nil),
		(*SSMsg_FetchUserProfileReq)(nil),
		(*SSMsg_FetchUserProfileRsp)(nil),
		(*SSMsg_SaveUserProfileReq)(nil),
		(*SSMsg_ChgGroupAttrReq)(nil),
		(*SSMsg_ChgGroupAttrRsp)(nil),
		(*SSMsg_GroupGroundReq)(nil),
		(*SSMsg_GroupGroundRsp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ss_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ss_proto_goTypes,
		DependencyIndexes: file_ss_proto_depIdxs,
		EnumInfos:         file_ss_proto_enumTypes,
		MessageInfos:      file_ss_proto_msgTypes,
	}.Build()
	File_ss_proto = out.File
	file_ss_proto_rawDesc = nil
	file_ss_proto_goTypes = nil
	file_ss_proto_depIdxs = nil
}
