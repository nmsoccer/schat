// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.3
// source: disp.proto

package ss

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//
//Target Server Type
type DISP_MSG_TARGET int32

const (
	DISP_MSG_TARGET_NON_SERVER    DISP_MSG_TARGET = 0 //no target type specified
	DISP_MSG_TARGET_LOGIC_SERVER  DISP_MSG_TARGET = 1
	DISP_MSG_TARGET_CHAT_SERVER   DISP_MSG_TARGET = 2
	DISP_MSG_TARGET_ONLINE_SERVER DISP_MSG_TARGET = 3
	DISP_MSG_TARGET_FILE_SERVER   DISP_MSG_TARGET = 4
	DISP_MSG_TARGET_DIR_SERVER    DISP_MSG_TARGET = 5
)

// Enum value maps for DISP_MSG_TARGET.
var (
	DISP_MSG_TARGET_name = map[int32]string{
		0: "NON_SERVER",
		1: "LOGIC_SERVER",
		2: "CHAT_SERVER",
		3: "ONLINE_SERVER",
		4: "FILE_SERVER",
		5: "DIR_SERVER",
	}
	DISP_MSG_TARGET_value = map[string]int32{
		"NON_SERVER":    0,
		"LOGIC_SERVER":  1,
		"CHAT_SERVER":   2,
		"ONLINE_SERVER": 3,
		"FILE_SERVER":   4,
		"DIR_SERVER":    5,
	}
)

func (x DISP_MSG_TARGET) Enum() *DISP_MSG_TARGET {
	p := new(DISP_MSG_TARGET)
	*p = x
	return p
}

func (x DISP_MSG_TARGET) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISP_MSG_TARGET) Descriptor() protoreflect.EnumDescriptor {
	return file_disp_proto_enumTypes[0].Descriptor()
}

func (DISP_MSG_TARGET) Type() protoreflect.EnumType {
	return &file_disp_proto_enumTypes[0]
}

func (x DISP_MSG_TARGET) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISP_MSG_TARGET.Descriptor instead.
func (DISP_MSG_TARGET) EnumDescriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{0}
}

//
//Choose Target Server Method
type DISP_MSG_METHOD int32

const (
	DISP_MSG_METHOD_RAND DISP_MSG_METHOD = 0
	DISP_MSG_METHOD_HASH DISP_MSG_METHOD = 1
	DISP_MSG_METHOD_SPEC DISP_MSG_METHOD = 2 //sepcify target
	DISP_MSG_METHOD_ALL  DISP_MSG_METHOD = 3 //all target
)

// Enum value maps for DISP_MSG_METHOD.
var (
	DISP_MSG_METHOD_name = map[int32]string{
		0: "RAND",
		1: "HASH",
		2: "SPEC",
		3: "ALL",
	}
	DISP_MSG_METHOD_value = map[string]int32{
		"RAND": 0,
		"HASH": 1,
		"SPEC": 2,
		"ALL":  3,
	}
)

func (x DISP_MSG_METHOD) Enum() *DISP_MSG_METHOD {
	p := new(DISP_MSG_METHOD)
	*p = x
	return p
}

func (x DISP_MSG_METHOD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISP_MSG_METHOD) Descriptor() protoreflect.EnumDescriptor {
	return file_disp_proto_enumTypes[1].Descriptor()
}

func (DISP_MSG_METHOD) Type() protoreflect.EnumType {
	return &file_disp_proto_enumTypes[1]
}

func (x DISP_MSG_METHOD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISP_MSG_METHOD.Descriptor instead.
func (DISP_MSG_METHOD) EnumDescriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{1}
}

//
// Disp Proto <serv1 -- disp -- serv2>
//
type DISP_PROTO_TYPE int32

const (
	DISP_PROTO_TYPE_DISP_HELLO               DISP_PROTO_TYPE = 0
	DISP_PROTO_TYPE_DISP_KICK_DUPLICATE_USER DISP_PROTO_TYPE = 1 //kick duplicate user on other line
	DISP_PROTO_TYPE_DISP_APPLY_GROUP_REQ     DISP_PROTO_TYPE = 2
	DISP_PROTO_TYPE_DISP_APPLY_GROUP_RSP     DISP_PROTO_TYPE = 3
	DISP_PROTO_TYPE_DISP_APPLY_GROUP_NOTIFY  DISP_PROTO_TYPE = 4 //notify apply to group master
	DISP_PROTO_TYPE_DISP_APPLY_GROUP_AUDIT   DISP_PROTO_TYPE = 5 //master audit apply
	DISP_PROTO_TYPE_DISP_COMMON_NOTIFY       DISP_PROTO_TYPE = 6
	DISP_PROTO_TYPE_DISP_ENTER_GROUP_REQ     DISP_PROTO_TYPE = 7
	DISP_PROTO_TYPE_DISP_ENTER_GROUP_RSP     DISP_PROTO_TYPE = 8
	DISP_PROTO_TYPE_DISP_SEND_CHAT_REQ       DISP_PROTO_TYPE = 9
	DISP_PROTO_TYPE_DISP_SEND_CHAT_RSP       DISP_PROTO_TYPE = 10
	DISP_PROTO_TYPE_DISP_QUERY_GROUP_REQ     DISP_PROTO_TYPE = 11
	DISP_PROTO_TYPE_DISP_SYNC_GROUP_INFO     DISP_PROTO_TYPE = 12 //Add Proto Should Also Modify servers/comm/disp.go:GenDispMsg
)

// Enum value maps for DISP_PROTO_TYPE.
var (
	DISP_PROTO_TYPE_name = map[int32]string{
		0:  "DISP_HELLO",
		1:  "DISP_KICK_DUPLICATE_USER",
		2:  "DISP_APPLY_GROUP_REQ",
		3:  "DISP_APPLY_GROUP_RSP",
		4:  "DISP_APPLY_GROUP_NOTIFY",
		5:  "DISP_APPLY_GROUP_AUDIT",
		6:  "DISP_COMMON_NOTIFY",
		7:  "DISP_ENTER_GROUP_REQ",
		8:  "DISP_ENTER_GROUP_RSP",
		9:  "DISP_SEND_CHAT_REQ",
		10: "DISP_SEND_CHAT_RSP",
		11: "DISP_QUERY_GROUP_REQ",
		12: "DISP_SYNC_GROUP_INFO",
	}
	DISP_PROTO_TYPE_value = map[string]int32{
		"DISP_HELLO":               0,
		"DISP_KICK_DUPLICATE_USER": 1,
		"DISP_APPLY_GROUP_REQ":     2,
		"DISP_APPLY_GROUP_RSP":     3,
		"DISP_APPLY_GROUP_NOTIFY":  4,
		"DISP_APPLY_GROUP_AUDIT":   5,
		"DISP_COMMON_NOTIFY":       6,
		"DISP_ENTER_GROUP_REQ":     7,
		"DISP_ENTER_GROUP_RSP":     8,
		"DISP_SEND_CHAT_REQ":       9,
		"DISP_SEND_CHAT_RSP":       10,
		"DISP_QUERY_GROUP_REQ":     11,
		"DISP_SYNC_GROUP_INFO":     12,
	}
)

func (x DISP_PROTO_TYPE) Enum() *DISP_PROTO_TYPE {
	p := new(DISP_PROTO_TYPE)
	*p = x
	return p
}

func (x DISP_PROTO_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISP_PROTO_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_disp_proto_enumTypes[2].Descriptor()
}

func (DISP_PROTO_TYPE) Type() protoreflect.EnumType {
	return &file_disp_proto_enumTypes[2]
}

func (x DISP_PROTO_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISP_PROTO_TYPE.Descriptor instead.
func (DISP_PROTO_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{2}
}

//apply group. this will exist in main and disp msg
type APPLY_GROUP_RESULT int32

const (
	APPLY_GROUP_RESULT_APPLY_GRP_DONE  APPLY_GROUP_RESULT = 0 //apply done
	APPLY_GROUP_RESULT_APPLY_GRP_ALLOW APPLY_GROUP_RESULT = 1
	APPLY_GROUP_RESULT_APPLY_GRP_DENY  APPLY_GROUP_RESULT = 2
	APPLY_GROUP_RESULT_APPLY_GRP_NONE  APPLY_GROUP_RESULT = 3 // not exist
	APPLY_GROUP_RESULT_APPLY_GRP_PASS  APPLY_GROUP_RESULT = 4 //pass error
	APPLY_GROUP_RESULT_APPLY_GRP_EXIST APPLY_GROUP_RESULT = 5 //already in
	APPLY_GROUP_RESULT_APPLY_GRP_ERR   APPLY_GROUP_RESULT = 6 //sys err
)

// Enum value maps for APPLY_GROUP_RESULT.
var (
	APPLY_GROUP_RESULT_name = map[int32]string{
		0: "APPLY_GRP_DONE",
		1: "APPLY_GRP_ALLOW",
		2: "APPLY_GRP_DENY",
		3: "APPLY_GRP_NONE",
		4: "APPLY_GRP_PASS",
		5: "APPLY_GRP_EXIST",
		6: "APPLY_GRP_ERR",
	}
	APPLY_GROUP_RESULT_value = map[string]int32{
		"APPLY_GRP_DONE":  0,
		"APPLY_GRP_ALLOW": 1,
		"APPLY_GRP_DENY":  2,
		"APPLY_GRP_NONE":  3,
		"APPLY_GRP_PASS":  4,
		"APPLY_GRP_EXIST": 5,
		"APPLY_GRP_ERR":   6,
	}
)

func (x APPLY_GROUP_RESULT) Enum() *APPLY_GROUP_RESULT {
	p := new(APPLY_GROUP_RESULT)
	*p = x
	return p
}

func (x APPLY_GROUP_RESULT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLY_GROUP_RESULT) Descriptor() protoreflect.EnumDescriptor {
	return file_disp_proto_enumTypes[3].Descriptor()
}

func (APPLY_GROUP_RESULT) Type() protoreflect.EnumType {
	return &file_disp_proto_enumTypes[3]
}

func (x APPLY_GROUP_RESULT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLY_GROUP_RESULT.Descriptor instead.
func (APPLY_GROUP_RESULT) EnumDescriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{3}
}

//common notify
type COMMON_NOTIFY_TYPE int32

const (
	COMMON_NOTIFY_TYPE_NOTIFY_NEW_AUDIT         COMMON_NOTIFY_TYPE = 0  //new audit info
	COMMON_NOTIFY_TYPE_NOTIFY_USER_LOGIN        COMMON_NOTIFY_TYPE = 1  //user login
	COMMON_NOTIFY_TYPE_NOTIFY_USER_LOGOUT       COMMON_NOTIFY_TYPE = 2  //user logout
	COMMON_NOTIFY_TYPE_NOTIFY_NEW_MSG           COMMON_NOTIFY_TYPE = 3  //new chat msg
	COMMON_NOTIFY_TYPE_NOTIFY_UPLOAD_FILE       COMMON_NOTIFY_TYPE = 4  //upload file
	COMMON_NOTIFY_TYPE_NOTIFY_SERV_LOAD         COMMON_NOTIFY_TYPE = 5  //notify server load
	COMMON_NOTIFY_TYPE_NOTIFY_EXIT_GROUP        COMMON_NOTIFY_TYPE = 6  //notify exit group
	COMMON_NOTIFY_TYPE_NOTIFY_DEL_GROUP         COMMON_NOTIFY_TYPE = 7  //notify del group
	COMMON_NOTIFY_TYPE_NOTIFY_FILE_ADDR         COMMON_NOTIFY_TYPE = 8  //notify file addr
	COMMON_NOTIFY_TYPE_NOTIFY_BATCH_USER_ONLINE COMMON_NOTIFY_TYPE = 9  //notify batch user online serv
	COMMON_NOTIFY_TYPE_NOTIFY_KICK_GROUP        COMMON_NOTIFY_TYPE = 10 //notify kick group
	COMMON_NOTIFY_TYPE_NOTIFY_ADD_MEMBER        COMMON_NOTIFY_TYPE = 11 //group add member
	COMMON_NOTIFY_TYPE_NOTIFY_DEL_MEMBER        COMMON_NOTIFY_TYPE = 12 //group del member
	COMMON_NOTIFY_TYPE_NOTIFY_FILE_TOKEN        COMMON_NOTIFY_TYPE = 13 //file_server token to dir
)

// Enum value maps for COMMON_NOTIFY_TYPE.
var (
	COMMON_NOTIFY_TYPE_name = map[int32]string{
		0:  "NOTIFY_NEW_AUDIT",
		1:  "NOTIFY_USER_LOGIN",
		2:  "NOTIFY_USER_LOGOUT",
		3:  "NOTIFY_NEW_MSG",
		4:  "NOTIFY_UPLOAD_FILE",
		5:  "NOTIFY_SERV_LOAD",
		6:  "NOTIFY_EXIT_GROUP",
		7:  "NOTIFY_DEL_GROUP",
		8:  "NOTIFY_FILE_ADDR",
		9:  "NOTIFY_BATCH_USER_ONLINE",
		10: "NOTIFY_KICK_GROUP",
		11: "NOTIFY_ADD_MEMBER",
		12: "NOTIFY_DEL_MEMBER",
		13: "NOTIFY_FILE_TOKEN",
	}
	COMMON_NOTIFY_TYPE_value = map[string]int32{
		"NOTIFY_NEW_AUDIT":         0,
		"NOTIFY_USER_LOGIN":        1,
		"NOTIFY_USER_LOGOUT":       2,
		"NOTIFY_NEW_MSG":           3,
		"NOTIFY_UPLOAD_FILE":       4,
		"NOTIFY_SERV_LOAD":         5,
		"NOTIFY_EXIT_GROUP":        6,
		"NOTIFY_DEL_GROUP":         7,
		"NOTIFY_FILE_ADDR":         8,
		"NOTIFY_BATCH_USER_ONLINE": 9,
		"NOTIFY_KICK_GROUP":        10,
		"NOTIFY_ADD_MEMBER":        11,
		"NOTIFY_DEL_MEMBER":        12,
		"NOTIFY_FILE_TOKEN":        13,
	}
)

func (x COMMON_NOTIFY_TYPE) Enum() *COMMON_NOTIFY_TYPE {
	p := new(COMMON_NOTIFY_TYPE)
	*p = x
	return p
}

func (x COMMON_NOTIFY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COMMON_NOTIFY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_disp_proto_enumTypes[4].Descriptor()
}

func (COMMON_NOTIFY_TYPE) Type() protoreflect.EnumType {
	return &file_disp_proto_enumTypes[4]
}

func (x COMMON_NOTIFY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COMMON_NOTIFY_TYPE.Descriptor instead.
func (COMMON_NOTIFY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{4}
}

//Send Chat
type SEND_CHAT_RESULT int32

const (
	SEND_CHAT_RESULT_SEND_CHAT_SUCCESS    SEND_CHAT_RESULT = 0
	SEND_CHAT_RESULT_SEND_CHAT_NONE_GROUP SEND_CHAT_RESULT = 1 //group not exist
	SEND_CHAT_RESULT_SEND_CHAT_FAIL       SEND_CHAT_RESULT = 2
)

// Enum value maps for SEND_CHAT_RESULT.
var (
	SEND_CHAT_RESULT_name = map[int32]string{
		0: "SEND_CHAT_SUCCESS",
		1: "SEND_CHAT_NONE_GROUP",
		2: "SEND_CHAT_FAIL",
	}
	SEND_CHAT_RESULT_value = map[string]int32{
		"SEND_CHAT_SUCCESS":    0,
		"SEND_CHAT_NONE_GROUP": 1,
		"SEND_CHAT_FAIL":       2,
	}
)

func (x SEND_CHAT_RESULT) Enum() *SEND_CHAT_RESULT {
	p := new(SEND_CHAT_RESULT)
	*p = x
	return p
}

func (x SEND_CHAT_RESULT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SEND_CHAT_RESULT) Descriptor() protoreflect.EnumDescriptor {
	return file_disp_proto_enumTypes[5].Descriptor()
}

func (SEND_CHAT_RESULT) Type() protoreflect.EnumType {
	return &file_disp_proto_enumTypes[5]
}

func (x SEND_CHAT_RESULT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SEND_CHAT_RESULT.Descriptor instead.
func (SEND_CHAT_RESULT) EnumDescriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{5}
}

//DispMsg
//Tips:DisMsg mostly may carry occupy member to passthrough
type MsgDisp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoType  DISP_PROTO_TYPE `protobuf:"varint,1,opt,name=proto_type,json=protoType,proto3,enum=ss.DISP_PROTO_TYPE" json:"proto_type,omitempty"`
	Target     DISP_MSG_TARGET `protobuf:"varint,2,opt,name=target,proto3,enum=ss.DISP_MSG_TARGET" json:"target,omitempty"`
	Method     DISP_MSG_METHOD `protobuf:"varint,3,opt,name=method,proto3,enum=ss.DISP_MSG_METHOD" json:"method,omitempty"`
	SpecServer int32           `protobuf:"varint,4,opt,name=spec_server,json=specServer,proto3" json:"spec_server,omitempty"` //only for METHOD_SPEC
	FromServer int32           `protobuf:"varint,5,opt,name=from_server,json=fromServer,proto3" json:"from_server,omitempty"`
	HashV      int64           `protobuf:"varint,6,opt,name=hash_v,json=hashV,proto3" json:"hash_v,omitempty"` //only for METHOD_HASH
	// Types that are assignable to DispBody:
	//	*MsgDisp_Hello
	//	*MsgDisp_KickDupUser
	//	*MsgDisp_ApplyGroupReq
	//	*MsgDisp_ApplyGroupRsp
	//	*MsgDisp_ApplyGroupNotify
	//	*MsgDisp_ApplyGroupAudit
	//	*MsgDisp_CommonNotify
	//	*MsgDisp_EnterGroupReq
	//	*MsgDisp_EnterGroupRsp
	//	*MsgDisp_SendChatReq
	//	*MsgDisp_SendChatRsp
	//	*MsgDisp_QueryGroupReq
	//	*MsgDisp_SyncGroupInfo
	DispBody isMsgDisp_DispBody `protobuf_oneof:"disp_body"`
}

func (x *MsgDisp) Reset() {
	*x = MsgDisp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDisp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDisp) ProtoMessage() {}

func (x *MsgDisp) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDisp.ProtoReflect.Descriptor instead.
func (*MsgDisp) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{0}
}

func (x *MsgDisp) GetProtoType() DISP_PROTO_TYPE {
	if x != nil {
		return x.ProtoType
	}
	return DISP_PROTO_TYPE_DISP_HELLO
}

func (x *MsgDisp) GetTarget() DISP_MSG_TARGET {
	if x != nil {
		return x.Target
	}
	return DISP_MSG_TARGET_NON_SERVER
}

func (x *MsgDisp) GetMethod() DISP_MSG_METHOD {
	if x != nil {
		return x.Method
	}
	return DISP_MSG_METHOD_RAND
}

func (x *MsgDisp) GetSpecServer() int32 {
	if x != nil {
		return x.SpecServer
	}
	return 0
}

func (x *MsgDisp) GetFromServer() int32 {
	if x != nil {
		return x.FromServer
	}
	return 0
}

func (x *MsgDisp) GetHashV() int64 {
	if x != nil {
		return x.HashV
	}
	return 0
}

func (m *MsgDisp) GetDispBody() isMsgDisp_DispBody {
	if m != nil {
		return m.DispBody
	}
	return nil
}

func (x *MsgDisp) GetHello() *MsgDispHello {
	if x, ok := x.GetDispBody().(*MsgDisp_Hello); ok {
		return x.Hello
	}
	return nil
}

func (x *MsgDisp) GetKickDupUser() *MsgDispKickDupUser {
	if x, ok := x.GetDispBody().(*MsgDisp_KickDupUser); ok {
		return x.KickDupUser
	}
	return nil
}

func (x *MsgDisp) GetApplyGroupReq() *MsgApplyGroupReq {
	if x, ok := x.GetDispBody().(*MsgDisp_ApplyGroupReq); ok {
		return x.ApplyGroupReq
	}
	return nil
}

func (x *MsgDisp) GetApplyGroupRsp() *MsgApplyGroupRsp {
	if x, ok := x.GetDispBody().(*MsgDisp_ApplyGroupRsp); ok {
		return x.ApplyGroupRsp
	}
	return nil
}

func (x *MsgDisp) GetApplyGroupNotify() *MsgApplyGroupNotify {
	if x, ok := x.GetDispBody().(*MsgDisp_ApplyGroupNotify); ok {
		return x.ApplyGroupNotify
	}
	return nil
}

func (x *MsgDisp) GetApplyGroupAudit() *MsgApplyGroupAudit {
	if x, ok := x.GetDispBody().(*MsgDisp_ApplyGroupAudit); ok {
		return x.ApplyGroupAudit
	}
	return nil
}

func (x *MsgDisp) GetCommonNotify() *MsgCommonNotify {
	if x, ok := x.GetDispBody().(*MsgDisp_CommonNotify); ok {
		return x.CommonNotify
	}
	return nil
}

func (x *MsgDisp) GetEnterGroupReq() *MsgEnterGroupReq {
	if x, ok := x.GetDispBody().(*MsgDisp_EnterGroupReq); ok {
		return x.EnterGroupReq
	}
	return nil
}

func (x *MsgDisp) GetEnterGroupRsp() *MsgEnterGroupRsp {
	if x, ok := x.GetDispBody().(*MsgDisp_EnterGroupRsp); ok {
		return x.EnterGroupRsp
	}
	return nil
}

func (x *MsgDisp) GetSendChatReq() *MsgSendChatReq {
	if x, ok := x.GetDispBody().(*MsgDisp_SendChatReq); ok {
		return x.SendChatReq
	}
	return nil
}

func (x *MsgDisp) GetSendChatRsp() *MsgSendChatRsp {
	if x, ok := x.GetDispBody().(*MsgDisp_SendChatRsp); ok {
		return x.SendChatRsp
	}
	return nil
}

func (x *MsgDisp) GetQueryGroupReq() *MsgQueryGroupReq {
	if x, ok := x.GetDispBody().(*MsgDisp_QueryGroupReq); ok {
		return x.QueryGroupReq
	}
	return nil
}

func (x *MsgDisp) GetSyncGroupInfo() *MsgSyncGroupInfo {
	if x, ok := x.GetDispBody().(*MsgDisp_SyncGroupInfo); ok {
		return x.SyncGroupInfo
	}
	return nil
}

type isMsgDisp_DispBody interface {
	isMsgDisp_DispBody()
}

type MsgDisp_Hello struct {
	Hello *MsgDispHello `protobuf:"bytes,20,opt,name=hello,proto3,oneof"`
}

type MsgDisp_KickDupUser struct {
	KickDupUser *MsgDispKickDupUser `protobuf:"bytes,21,opt,name=kick_dup_user,json=kickDupUser,proto3,oneof"`
}

type MsgDisp_ApplyGroupReq struct {
	ApplyGroupReq *MsgApplyGroupReq `protobuf:"bytes,22,opt,name=apply_group_req,json=applyGroupReq,proto3,oneof"`
}

type MsgDisp_ApplyGroupRsp struct {
	ApplyGroupRsp *MsgApplyGroupRsp `protobuf:"bytes,23,opt,name=apply_group_rsp,json=applyGroupRsp,proto3,oneof"`
}

type MsgDisp_ApplyGroupNotify struct {
	ApplyGroupNotify *MsgApplyGroupNotify `protobuf:"bytes,24,opt,name=apply_group_notify,json=applyGroupNotify,proto3,oneof"`
}

type MsgDisp_ApplyGroupAudit struct {
	ApplyGroupAudit *MsgApplyGroupAudit `protobuf:"bytes,25,opt,name=apply_group_audit,json=applyGroupAudit,proto3,oneof"`
}

type MsgDisp_CommonNotify struct {
	CommonNotify *MsgCommonNotify `protobuf:"bytes,26,opt,name=common_notify,json=commonNotify,proto3,oneof"`
}

type MsgDisp_EnterGroupReq struct {
	EnterGroupReq *MsgEnterGroupReq `protobuf:"bytes,27,opt,name=enter_group_req,json=enterGroupReq,proto3,oneof"`
}

type MsgDisp_EnterGroupRsp struct {
	EnterGroupRsp *MsgEnterGroupRsp `protobuf:"bytes,28,opt,name=enter_group_rsp,json=enterGroupRsp,proto3,oneof"`
}

type MsgDisp_SendChatReq struct {
	SendChatReq *MsgSendChatReq `protobuf:"bytes,29,opt,name=send_chat_req,json=sendChatReq,proto3,oneof"`
}

type MsgDisp_SendChatRsp struct {
	SendChatRsp *MsgSendChatRsp `protobuf:"bytes,30,opt,name=send_chat_rsp,json=sendChatRsp,proto3,oneof"`
}

type MsgDisp_QueryGroupReq struct {
	QueryGroupReq *MsgQueryGroupReq `protobuf:"bytes,31,opt,name=query_group_req,json=queryGroupReq,proto3,oneof"`
}

type MsgDisp_SyncGroupInfo struct {
	SyncGroupInfo *MsgSyncGroupInfo `protobuf:"bytes,32,opt,name=sync_group_info,json=syncGroupInfo,proto3,oneof"`
}

func (*MsgDisp_Hello) isMsgDisp_DispBody() {}

func (*MsgDisp_KickDupUser) isMsgDisp_DispBody() {}

func (*MsgDisp_ApplyGroupReq) isMsgDisp_DispBody() {}

func (*MsgDisp_ApplyGroupRsp) isMsgDisp_DispBody() {}

func (*MsgDisp_ApplyGroupNotify) isMsgDisp_DispBody() {}

func (*MsgDisp_ApplyGroupAudit) isMsgDisp_DispBody() {}

func (*MsgDisp_CommonNotify) isMsgDisp_DispBody() {}

func (*MsgDisp_EnterGroupReq) isMsgDisp_DispBody() {}

func (*MsgDisp_EnterGroupRsp) isMsgDisp_DispBody() {}

func (*MsgDisp_SendChatReq) isMsgDisp_DispBody() {}

func (*MsgDisp_SendChatRsp) isMsgDisp_DispBody() {}

func (*MsgDisp_QueryGroupReq) isMsgDisp_DispBody() {}

func (*MsgDisp_SyncGroupInfo) isMsgDisp_DispBody() {}

//*********DISP SUB MSG************
type MsgDispHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MsgDispHello) Reset() {
	*x = MsgDispHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDispHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDispHello) ProtoMessage() {}

func (x *MsgDispHello) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDispHello.ProtoReflect.Descriptor instead.
func (*MsgDispHello) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{1}
}

func (x *MsgDispHello) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type MsgDispKickDupUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUid int64 `protobuf:"varint,1,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"` //target uid
}

func (x *MsgDispKickDupUser) Reset() {
	*x = MsgDispKickDupUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDispKickDupUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDispKickDupUser) ProtoMessage() {}

func (x *MsgDispKickDupUser) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDispKickDupUser.ProtoReflect.Descriptor instead.
func (*MsgDispKickDupUser) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{2}
}

func (x *MsgDispKickDupUser) GetTargetUid() int64 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

//apply group
type MsgApplyGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Pass      string `protobuf:"bytes,3,opt,name=pass,proto3" json:"pass,omitempty"`
	ApplyUid  int64  `protobuf:"varint,4,opt,name=apply_uid,json=applyUid,proto3" json:"apply_uid,omitempty"`
	ApplyName string `protobuf:"bytes,5,opt,name=apply_name,json=applyName,proto3" json:"apply_name,omitempty"`
	ApplyMsg  string `protobuf:"bytes,6,opt,name=apply_msg,json=applyMsg,proto3" json:"apply_msg,omitempty"` //apply msg
	Occupy    int64  `protobuf:"varint,20,opt,name=occupy,proto3" json:"occupy,omitempty"`                   //payload
}

func (x *MsgApplyGroupReq) Reset() {
	*x = MsgApplyGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgApplyGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgApplyGroupReq) ProtoMessage() {}

func (x *MsgApplyGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgApplyGroupReq.ProtoReflect.Descriptor instead.
func (*MsgApplyGroupReq) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{3}
}

func (x *MsgApplyGroupReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MsgApplyGroupReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *MsgApplyGroupReq) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *MsgApplyGroupReq) GetApplyUid() int64 {
	if x != nil {
		return x.ApplyUid
	}
	return 0
}

func (x *MsgApplyGroupReq) GetApplyName() string {
	if x != nil {
		return x.ApplyName
	}
	return ""
}

func (x *MsgApplyGroupReq) GetApplyMsg() string {
	if x != nil {
		return x.ApplyMsg
	}
	return ""
}

func (x *MsgApplyGroupReq) GetOccupy() int64 {
	if x != nil {
		return x.Occupy
	}
	return 0
}

type MsgApplyGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    APPLY_GROUP_RESULT `protobuf:"varint,1,opt,name=result,proto3,enum=ss.APPLY_GROUP_RESULT" json:"result,omitempty"`
	GroupId   int64              `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName string             `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	ApplyUid  int64              `protobuf:"varint,4,opt,name=apply_uid,json=applyUid,proto3" json:"apply_uid,omitempty"`
	ApplyName string             `protobuf:"bytes,5,opt,name=apply_name,json=applyName,proto3" json:"apply_name,omitempty"`
	Occupy    int64              `protobuf:"varint,20,opt,name=occupy,proto3" json:"occupy,omitempty"` //payload
}

func (x *MsgApplyGroupRsp) Reset() {
	*x = MsgApplyGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgApplyGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgApplyGroupRsp) ProtoMessage() {}

func (x *MsgApplyGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgApplyGroupRsp.ProtoReflect.Descriptor instead.
func (*MsgApplyGroupRsp) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{4}
}

func (x *MsgApplyGroupRsp) GetResult() APPLY_GROUP_RESULT {
	if x != nil {
		return x.Result
	}
	return APPLY_GROUP_RESULT_APPLY_GRP_DONE
}

func (x *MsgApplyGroupRsp) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MsgApplyGroupRsp) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *MsgApplyGroupRsp) GetApplyUid() int64 {
	if x != nil {
		return x.ApplyUid
	}
	return 0
}

func (x *MsgApplyGroupRsp) GetApplyName() string {
	if x != nil {
		return x.ApplyName
	}
	return ""
}

func (x *MsgApplyGroupRsp) GetOccupy() int64 {
	if x != nil {
		return x.Occupy
	}
	return 0
}

type MsgApplyGroupNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    int64   `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName  string  `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	MasterUid  int64   `protobuf:"varint,3,opt,name=master_uid,json=masterUid,proto3" json:"master_uid,omitempty"` //group master
	ApplyUid   int64   `protobuf:"varint,4,opt,name=apply_uid,json=applyUid,proto3" json:"apply_uid,omitempty"`    //apply uid
	ApplyName  string  `protobuf:"bytes,5,opt,name=apply_name,json=applyName,proto3" json:"apply_name,omitempty"`  //apply user
	ApplyMsg   string  `protobuf:"bytes,6,opt,name=apply_msg,json=applyMsg,proto3" json:"apply_msg,omitempty"`
	OccupySize int32   `protobuf:"varint,20,opt,name=occupy_size,json=occupySize,proto3" json:"occupy_size,omitempty"`
	Occupy     []int64 `protobuf:"varint,21,rep,packed,name=occupy,proto3" json:"occupy,omitempty"` //occupy data
}

func (x *MsgApplyGroupNotify) Reset() {
	*x = MsgApplyGroupNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgApplyGroupNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgApplyGroupNotify) ProtoMessage() {}

func (x *MsgApplyGroupNotify) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgApplyGroupNotify.ProtoReflect.Descriptor instead.
func (*MsgApplyGroupNotify) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{5}
}

func (x *MsgApplyGroupNotify) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MsgApplyGroupNotify) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *MsgApplyGroupNotify) GetMasterUid() int64 {
	if x != nil {
		return x.MasterUid
	}
	return 0
}

func (x *MsgApplyGroupNotify) GetApplyUid() int64 {
	if x != nil {
		return x.ApplyUid
	}
	return 0
}

func (x *MsgApplyGroupNotify) GetApplyName() string {
	if x != nil {
		return x.ApplyName
	}
	return ""
}

func (x *MsgApplyGroupNotify) GetApplyMsg() string {
	if x != nil {
		return x.ApplyMsg
	}
	return ""
}

func (x *MsgApplyGroupNotify) GetOccupySize() int32 {
	if x != nil {
		return x.OccupySize
	}
	return 0
}

func (x *MsgApplyGroupNotify) GetOccupy() []int64 {
	if x != nil {
		return x.Occupy
	}
	return nil
}

type MsgApplyGroupAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    APPLY_GROUP_RESULT `protobuf:"varint,1,opt,name=result,proto3,enum=ss.APPLY_GROUP_RESULT" json:"result,omitempty"` //only use ALLOW&DENY
	GroupId   int64              `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName string             `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	ApplyUid  int64              `protobuf:"varint,4,opt,name=apply_uid,json=applyUid,proto3" json:"apply_uid,omitempty"`
	Uid       int64              `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *MsgApplyGroupAudit) Reset() {
	*x = MsgApplyGroupAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgApplyGroupAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgApplyGroupAudit) ProtoMessage() {}

func (x *MsgApplyGroupAudit) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgApplyGroupAudit.ProtoReflect.Descriptor instead.
func (*MsgApplyGroupAudit) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{6}
}

func (x *MsgApplyGroupAudit) GetResult() APPLY_GROUP_RESULT {
	if x != nil {
		return x.Result
	}
	return APPLY_GROUP_RESULT_APPLY_GRP_DONE
}

func (x *MsgApplyGroupAudit) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MsgApplyGroupAudit) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *MsgApplyGroupAudit) GetApplyUid() int64 {
	if x != nil {
		return x.ApplyUid
	}
	return 0
}

func (x *MsgApplyGroupAudit) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type MsgCommonNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyType COMMON_NOTIFY_TYPE `protobuf:"varint,1,opt,name=notify_type,json=notifyType,proto3,enum=ss.COMMON_NOTIFY_TYPE" json:"notify_type,omitempty"`
	Uid        int64              `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	IntV       int64              `protobuf:"varint,3,opt,name=int_v,json=intV,proto3" json:"int_v,omitempty"`
	StrV       string             `protobuf:"bytes,4,opt,name=str_v,json=strV,proto3" json:"str_v,omitempty"`
	GrpId      int64              `protobuf:"varint,5,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	Members    map[int64]int32    `protobuf:"bytes,20,rep,name=members,proto3" json:"members,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ChatMsg    *ChatMsg           `protobuf:"bytes,21,opt,name=chat_msg,json=chatMsg,proto3" json:"chat_msg,omitempty"`
	Strs       []string           `protobuf:"bytes,22,rep,name=strs,proto3" json:"strs,omitempty"`
}

func (x *MsgCommonNotify) Reset() {
	*x = MsgCommonNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommonNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommonNotify) ProtoMessage() {}

func (x *MsgCommonNotify) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommonNotify.ProtoReflect.Descriptor instead.
func (*MsgCommonNotify) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{7}
}

func (x *MsgCommonNotify) GetNotifyType() COMMON_NOTIFY_TYPE {
	if x != nil {
		return x.NotifyType
	}
	return COMMON_NOTIFY_TYPE_NOTIFY_NEW_AUDIT
}

func (x *MsgCommonNotify) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgCommonNotify) GetIntV() int64 {
	if x != nil {
		return x.IntV
	}
	return 0
}

func (x *MsgCommonNotify) GetStrV() string {
	if x != nil {
		return x.StrV
	}
	return ""
}

func (x *MsgCommonNotify) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgCommonNotify) GetMembers() map[int64]int32 {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *MsgCommonNotify) GetChatMsg() *ChatMsg {
	if x != nil {
		return x.ChatMsg
	}
	return nil
}

func (x *MsgCommonNotify) GetStrs() []string {
	if x != nil {
		return x.Strs
	}
	return nil
}

//enter group
type MsgEnterGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GrpId  int64 `protobuf:"varint,2,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	Occupy int64 `protobuf:"varint,20,opt,name=occupy,proto3" json:"occupy,omitempty"`
}

func (x *MsgEnterGroupReq) Reset() {
	*x = MsgEnterGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgEnterGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgEnterGroupReq) ProtoMessage() {}

func (x *MsgEnterGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgEnterGroupReq.ProtoReflect.Descriptor instead.
func (*MsgEnterGroupReq) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{8}
}

func (x *MsgEnterGroupReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgEnterGroupReq) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgEnterGroupReq) GetOccupy() int64 {
	if x != nil {
		return x.Occupy
	}
	return 0
}

type MsgEnterGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GrpId    int64  `protobuf:"varint,2,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	GrpName  string `protobuf:"bytes,3,opt,name=grp_name,json=grpName,proto3" json:"grp_name,omitempty"`
	Result   int32  `protobuf:"varint,4,opt,name=result,proto3" json:"result,omitempty"` //0:success 1:group not exist
	MsgCount int64  `protobuf:"varint,5,opt,name=msg_count,json=msgCount,proto3" json:"msg_count,omitempty"`
	Occupy   int64  `protobuf:"varint,20,opt,name=occupy,proto3" json:"occupy,omitempty"`
}

func (x *MsgEnterGroupRsp) Reset() {
	*x = MsgEnterGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgEnterGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgEnterGroupRsp) ProtoMessage() {}

func (x *MsgEnterGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgEnterGroupRsp.ProtoReflect.Descriptor instead.
func (*MsgEnterGroupRsp) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{9}
}

func (x *MsgEnterGroupRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgEnterGroupRsp) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgEnterGroupRsp) GetGrpName() string {
	if x != nil {
		return x.GrpName
	}
	return ""
}

func (x *MsgEnterGroupRsp) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MsgEnterGroupRsp) GetMsgCount() int64 {
	if x != nil {
		return x.MsgCount
	}
	return 0
}

func (x *MsgEnterGroupRsp) GetOccupy() int64 {
	if x != nil {
		return x.Occupy
	}
	return 0
}

type MsgSendChatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TempId  int64    `protobuf:"varint,2,opt,name=temp_id,json=tempId,proto3" json:"temp_id,omitempty"`
	ChatMsg *ChatMsg `protobuf:"bytes,3,opt,name=chat_msg,json=chatMsg,proto3" json:"chat_msg,omitempty"`
	Occupy  int64    `protobuf:"varint,20,opt,name=occupy,proto3" json:"occupy,omitempty"`
}

func (x *MsgSendChatReq) Reset() {
	*x = MsgSendChatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSendChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSendChatReq) ProtoMessage() {}

func (x *MsgSendChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSendChatReq.ProtoReflect.Descriptor instead.
func (*MsgSendChatReq) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{10}
}

func (x *MsgSendChatReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgSendChatReq) GetTempId() int64 {
	if x != nil {
		return x.TempId
	}
	return 0
}

func (x *MsgSendChatReq) GetChatMsg() *ChatMsg {
	if x != nil {
		return x.ChatMsg
	}
	return nil
}

func (x *MsgSendChatReq) GetOccupy() int64 {
	if x != nil {
		return x.Occupy
	}
	return 0
}

type MsgSendChatRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  SEND_CHAT_RESULT `protobuf:"varint,1,opt,name=result,proto3,enum=ss.SEND_CHAT_RESULT" json:"result,omitempty"`
	Uid     int64            `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	TempId  int64            `protobuf:"varint,3,opt,name=temp_id,json=tempId,proto3" json:"temp_id,omitempty"`
	ChatMsg *ChatMsg         `protobuf:"bytes,4,opt,name=chat_msg,json=chatMsg,proto3" json:"chat_msg,omitempty"`
	Occupy  int64            `protobuf:"varint,20,opt,name=occupy,proto3" json:"occupy,omitempty"`
}

func (x *MsgSendChatRsp) Reset() {
	*x = MsgSendChatRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSendChatRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSendChatRsp) ProtoMessage() {}

func (x *MsgSendChatRsp) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSendChatRsp.ProtoReflect.Descriptor instead.
func (*MsgSendChatRsp) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{11}
}

func (x *MsgSendChatRsp) GetResult() SEND_CHAT_RESULT {
	if x != nil {
		return x.Result
	}
	return SEND_CHAT_RESULT_SEND_CHAT_SUCCESS
}

func (x *MsgSendChatRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgSendChatRsp) GetTempId() int64 {
	if x != nil {
		return x.TempId
	}
	return 0
}

func (x *MsgSendChatRsp) GetChatMsg() *ChatMsg {
	if x != nil {
		return x.ChatMsg
	}
	return nil
}

func (x *MsgSendChatRsp) GetOccupy() int64 {
	if x != nil {
		return x.Occupy
	}
	return 0
}

//Group Info
type MsgQueryGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GrpId  int64 `protobuf:"varint,2,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	Occupy int64 `protobuf:"varint,20,opt,name=occupy,proto3" json:"occupy,omitempty"`
}

func (x *MsgQueryGroupReq) Reset() {
	*x = MsgQueryGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgQueryGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgQueryGroupReq) ProtoMessage() {}

func (x *MsgQueryGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgQueryGroupReq.ProtoReflect.Descriptor instead.
func (*MsgQueryGroupReq) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{12}
}

func (x *MsgQueryGroupReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgQueryGroupReq) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgQueryGroupReq) GetOccupy() int64 {
	if x != nil {
		return x.Occupy
	}
	return 0
}

type MsgSyncGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field   SS_GROUP_INFO_FIELD `protobuf:"varint,1,opt,name=field,proto3,enum=ss.SS_GROUP_INFO_FIELD" json:"field,omitempty"`
	Uid     int64               `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	GrpId   int64               `protobuf:"varint,3,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	GrpInfo *GroupInfo          `protobuf:"bytes,4,opt,name=grp_info,json=grpInfo,proto3" json:"grp_info,omitempty"`
	Occupy  int64               `protobuf:"varint,20,opt,name=occupy,proto3" json:"occupy,omitempty"`
}

func (x *MsgSyncGroupInfo) Reset() {
	*x = MsgSyncGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSyncGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSyncGroupInfo) ProtoMessage() {}

func (x *MsgSyncGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_disp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSyncGroupInfo.ProtoReflect.Descriptor instead.
func (*MsgSyncGroupInfo) Descriptor() ([]byte, []int) {
	return file_disp_proto_rawDescGZIP(), []int{13}
}

func (x *MsgSyncGroupInfo) GetField() SS_GROUP_INFO_FIELD {
	if x != nil {
		return x.Field
	}
	return SS_GROUP_INFO_FIELD_GRP_FIELD_ALL
}

func (x *MsgSyncGroupInfo) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgSyncGroupInfo) GetGrpId() int64 {
	if x != nil {
		return x.GrpId
	}
	return 0
}

func (x *MsgSyncGroupInfo) GetGrpInfo() *GroupInfo {
	if x != nil {
		return x.GrpInfo
	}
	return nil
}

func (x *MsgSyncGroupInfo) GetOccupy() int64 {
	if x != nil {
		return x.Occupy
	}
	return 0
}

var File_disp_proto protoreflect.FileDescriptor

var file_disp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x73, 0x73,
	0x1a, 0x0b, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x08, 0x0a, 0x07, 0x4d, 0x73,
	0x67, 0x44, 0x69, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e, 0x44,
	0x49, 0x53, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e, 0x44,
	0x49, 0x53, 0x50, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x50,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x76, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x68, 0x61, 0x73, 0x68, 0x56, 0x12, 0x28, 0x0a, 0x05,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x73,
	0x2e, 0x4d, 0x73, 0x67, 0x44, 0x69, 0x73, 0x70, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48, 0x00, 0x52,
	0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x3c, 0x0a, 0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x64,
	0x75, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x69, 0x73, 0x70, 0x4b, 0x69, 0x63, 0x6b, 0x44, 0x75,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x69, 0x63, 0x6b, 0x44, 0x75, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x44, 0x0a,
	0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73,
	0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x2e,
	0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x3e, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72,
	0x65, 0x71, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73,
	0x67, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00,
	0x52, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x3e, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72,
	0x73, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73,
	0x67, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x48, 0x00,
	0x52, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12,
	0x38, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65,
	0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x0d, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x73, 0x2e, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x48, 0x00, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x70, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x28, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x44, 0x69, 0x73, 0x70, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x12, 0x4d, 0x73,
	0x67, 0x44, 0x69, 0x73, 0x70, 0x4b, 0x69, 0x63, 0x6b, 0x44, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x22,
	0xd1, 0x01, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x79, 0x22, 0xd0, 0x01, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x73, 0x2e, 0x41, 0x50,
	0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x22, 0x80, 0x02, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x12, 0x4d, 0x73,
	0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x73, 0x73, 0x2e, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xd1, 0x02, 0x0a, 0x0f, 0x4d, 0x73,
	0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x37, 0x0a,
	0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x73, 0x2e, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x5f,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x56, 0x12, 0x13, 0x0a,
	0x05, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74,
	0x72, 0x56, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x70, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x73, 0x2e,
	0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x74, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x72,
	0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a,
	0x10, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x63,
	0x63, 0x75, 0x70, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x70, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x22, 0x7b, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x65, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x65, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x79, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x2e, 0x53, 0x45,
	0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x6d, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x63, 0x63, 0x75, 0x70,
	0x79, 0x22, 0x53, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x70, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x53, 0x79,
	0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x2e,
	0x53, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x67, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72,
	0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x67, 0x72, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x79, 0x2a, 0x78, 0x0a, 0x0f, 0x44, 0x49, 0x53, 0x50, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x47, 0x49,
	0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4f,
	0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x05, 0x2a,
	0x38, 0x0a, 0x0f, 0x44, 0x49, 0x53, 0x50, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x41, 0x53, 0x48, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x50, 0x45, 0x43, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0xdc, 0x02, 0x0a, 0x0f, 0x44, 0x49,
	0x53, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x49, 0x53, 0x50, 0x5f, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x44, 0x49, 0x53, 0x50, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x49, 0x53, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x53, 0x50, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x44, 0x49, 0x53, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x53, 0x50,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x06,
	0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x53, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49,
	0x53, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52,
	0x53, 0x50, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x53, 0x50, 0x5f, 0x53, 0x45, 0x4e,
	0x44, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x49, 0x53, 0x50, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52,
	0x53, 0x50, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x53, 0x50, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x0b, 0x12, 0x18,
	0x0a, 0x14, 0x44, 0x49, 0x53, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x0c, 0x2a, 0xa1, 0x01, 0x0a, 0x12, 0x41, 0x50, 0x50,
	0x4c, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x50, 0x5f, 0x44, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x50,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x50, 0x50, 0x4c,
	0x59, 0x5f, 0x47, 0x52, 0x50, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x50, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x47, 0x52,
	0x50, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50, 0x50,
	0x4c, 0x59, 0x5f, 0x47, 0x52, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x06, 0x2a, 0xd8, 0x02, 0x0a,
	0x12, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4e, 0x45,
	0x57, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x06, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x08, 0x12, 0x1c, 0x0a,
	0x18, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0c,
	0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x0d, 0x2a, 0x57, 0x0a, 0x10, 0x53, 0x45, 0x4e, 0x44, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_disp_proto_rawDescOnce sync.Once
	file_disp_proto_rawDescData = file_disp_proto_rawDesc
)

func file_disp_proto_rawDescGZIP() []byte {
	file_disp_proto_rawDescOnce.Do(func() {
		file_disp_proto_rawDescData = protoimpl.X.CompressGZIP(file_disp_proto_rawDescData)
	})
	return file_disp_proto_rawDescData
}

var file_disp_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_disp_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_disp_proto_goTypes = []interface{}{
	(DISP_MSG_TARGET)(0),        // 0: ss.DISP_MSG_TARGET
	(DISP_MSG_METHOD)(0),        // 1: ss.DISP_MSG_METHOD
	(DISP_PROTO_TYPE)(0),        // 2: ss.DISP_PROTO_TYPE
	(APPLY_GROUP_RESULT)(0),     // 3: ss.APPLY_GROUP_RESULT
	(COMMON_NOTIFY_TYPE)(0),     // 4: ss.COMMON_NOTIFY_TYPE
	(SEND_CHAT_RESULT)(0),       // 5: ss.SEND_CHAT_RESULT
	(*MsgDisp)(nil),             // 6: ss.MsgDisp
	(*MsgDispHello)(nil),        // 7: ss.MsgDispHello
	(*MsgDispKickDupUser)(nil),  // 8: ss.MsgDispKickDupUser
	(*MsgApplyGroupReq)(nil),    // 9: ss.MsgApplyGroupReq
	(*MsgApplyGroupRsp)(nil),    // 10: ss.MsgApplyGroupRsp
	(*MsgApplyGroupNotify)(nil), // 11: ss.MsgApplyGroupNotify
	(*MsgApplyGroupAudit)(nil),  // 12: ss.MsgApplyGroupAudit
	(*MsgCommonNotify)(nil),     // 13: ss.MsgCommonNotify
	(*MsgEnterGroupReq)(nil),    // 14: ss.MsgEnterGroupReq
	(*MsgEnterGroupRsp)(nil),    // 15: ss.MsgEnterGroupRsp
	(*MsgSendChatReq)(nil),      // 16: ss.MsgSendChatReq
	(*MsgSendChatRsp)(nil),      // 17: ss.MsgSendChatRsp
	(*MsgQueryGroupReq)(nil),    // 18: ss.MsgQueryGroupReq
	(*MsgSyncGroupInfo)(nil),    // 19: ss.MsgSyncGroupInfo
	nil,                         // 20: ss.MsgCommonNotify.MembersEntry
	(*ChatMsg)(nil),             // 21: ss.ChatMsg
	(SS_GROUP_INFO_FIELD)(0),    // 22: ss.SS_GROUP_INFO_FIELD
	(*GroupInfo)(nil),           // 23: ss.GroupInfo
}
var file_disp_proto_depIdxs = []int32{
	2,  // 0: ss.MsgDisp.proto_type:type_name -> ss.DISP_PROTO_TYPE
	0,  // 1: ss.MsgDisp.target:type_name -> ss.DISP_MSG_TARGET
	1,  // 2: ss.MsgDisp.method:type_name -> ss.DISP_MSG_METHOD
	7,  // 3: ss.MsgDisp.hello:type_name -> ss.MsgDispHello
	8,  // 4: ss.MsgDisp.kick_dup_user:type_name -> ss.MsgDispKickDupUser
	9,  // 5: ss.MsgDisp.apply_group_req:type_name -> ss.MsgApplyGroupReq
	10, // 6: ss.MsgDisp.apply_group_rsp:type_name -> ss.MsgApplyGroupRsp
	11, // 7: ss.MsgDisp.apply_group_notify:type_name -> ss.MsgApplyGroupNotify
	12, // 8: ss.MsgDisp.apply_group_audit:type_name -> ss.MsgApplyGroupAudit
	13, // 9: ss.MsgDisp.common_notify:type_name -> ss.MsgCommonNotify
	14, // 10: ss.MsgDisp.enter_group_req:type_name -> ss.MsgEnterGroupReq
	15, // 11: ss.MsgDisp.enter_group_rsp:type_name -> ss.MsgEnterGroupRsp
	16, // 12: ss.MsgDisp.send_chat_req:type_name -> ss.MsgSendChatReq
	17, // 13: ss.MsgDisp.send_chat_rsp:type_name -> ss.MsgSendChatRsp
	18, // 14: ss.MsgDisp.query_group_req:type_name -> ss.MsgQueryGroupReq
	19, // 15: ss.MsgDisp.sync_group_info:type_name -> ss.MsgSyncGroupInfo
	3,  // 16: ss.MsgApplyGroupRsp.result:type_name -> ss.APPLY_GROUP_RESULT
	3,  // 17: ss.MsgApplyGroupAudit.result:type_name -> ss.APPLY_GROUP_RESULT
	4,  // 18: ss.MsgCommonNotify.notify_type:type_name -> ss.COMMON_NOTIFY_TYPE
	20, // 19: ss.MsgCommonNotify.members:type_name -> ss.MsgCommonNotify.MembersEntry
	21, // 20: ss.MsgCommonNotify.chat_msg:type_name -> ss.ChatMsg
	21, // 21: ss.MsgSendChatReq.chat_msg:type_name -> ss.ChatMsg
	5,  // 22: ss.MsgSendChatRsp.result:type_name -> ss.SEND_CHAT_RESULT
	21, // 23: ss.MsgSendChatRsp.chat_msg:type_name -> ss.ChatMsg
	22, // 24: ss.MsgSyncGroupInfo.field:type_name -> ss.SS_GROUP_INFO_FIELD
	23, // 25: ss.MsgSyncGroupInfo.grp_info:type_name -> ss.GroupInfo
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_disp_proto_init() }
func file_disp_proto_init() {
	if File_disp_proto != nil {
		return
	}
	file_basic_proto_init()
	file_chat_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_disp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDisp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDispHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDispKickDupUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgApplyGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgApplyGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgApplyGroupNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgApplyGroupAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommonNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgEnterGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgEnterGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSendChatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSendChatRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgQueryGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSyncGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_disp_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MsgDisp_Hello)(nil),
		(*MsgDisp_KickDupUser)(nil),
		(*MsgDisp_ApplyGroupReq)(nil),
		(*MsgDisp_ApplyGroupRsp)(nil),
		(*MsgDisp_ApplyGroupNotify)(nil),
		(*MsgDisp_ApplyGroupAudit)(nil),
		(*MsgDisp_CommonNotify)(nil),
		(*MsgDisp_EnterGroupReq)(nil),
		(*MsgDisp_EnterGroupRsp)(nil),
		(*MsgDisp_SendChatReq)(nil),
		(*MsgDisp_SendChatRsp)(nil),
		(*MsgDisp_QueryGroupReq)(nil),
		(*MsgDisp_SyncGroupInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_disp_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_disp_proto_goTypes,
		DependencyIndexes: file_disp_proto_depIdxs,
		EnumInfos:         file_disp_proto_enumTypes,
		MessageInfos:      file_disp_proto_msgTypes,
	}.Build()
	File_disp_proto = out.File
	file_disp_proto_rawDesc = nil
	file_disp_proto_goTypes = nil
	file_disp_proto_depIdxs = nil
}
